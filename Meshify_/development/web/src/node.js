// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events', 'async!https://www.google.com/jsapi'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var displayResults, node, nodeCompView, nodeView, nodes;

    node = Backbone.Model.extend({
      initialize: function() {
        return this.set({
          trafficlight: "green"
        });
      },
      defaults: {
        trafficlight: "green"
      }
    });
    nodes = Backbone.Collection.extend({
      model: node
    });
    nodeView = Backbone.Marionette.ItemView.extend({
      initialize: function(node) {
        this.bindTo(this.model, "change", this.render);
        return this.template = "#template-" + node.model.attributes.nodetemplate;
      },
      tagName: 'li',
      onRender: function() {
        var datasend, select, selectedval, _i, _len, _ref, _results;

        _ref = $(this.el).find("select");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          select = _ref[_i];
          datasend = $('option:selected', select).attr('data-send');
          if (typeof datasend !== 'undefined') {
            selectedval = this.model.get("channels")[$(select).attr("data-name")].value;
            _results.push($(select).val($(select).find("[data-send=" + selectedval + "]").val()));
          } else {
            if ($(select).attr("data-name")) {
              selectedval = this.model.get("channels")[$(select).attr("data-name")].value;
              _results.push($(select).val($(select).find("[value=" + selectedval + "]").val()));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      },
      events: {
        "click .setstatic": "setbutton",
        "slidestop .slider": "sliderSet",
        "change .select_set": "selectSet",
        "click #chart_div": "chart"
      },
      chart: function() {
        var drawChart;

        drawChart = function() {
          var chart, data, options;

          data = google.visualization.arrayToDataTable([["Label", "Value"], ["Memory", 80], ["CPU", 55], ["Network", 68]]);
          options = {
            width: 400,
            height: 120,
            redFrom: 90,
            redTo: 100,
            yellowFrom: 75,
            yellowTo: 90,
            minorTicks: 5
          };
          chart = new google.visualization.Gauge(document.getElementById("chart_div"));
          return chart.draw(data, options);
        };
        google.load("visualization", "1", {
          packages: ["gauge"]
        });
        return google.setOnLoadCallback(drawChart);
      },
      selectSet: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data)("channel" + "-" + e.currentTarget.value)
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = e.currentTarget.value;
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      sliderSet: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data("channel")) + "-" + e.currentTarget.value
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = e.currentTarget.value;
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      setbutton: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data("channel")) + "-" + ($(e.currentTarget).data("setvalue"))
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $('#mainDiv').removeClass($.mobile.activeBtnClass);
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = $(e.currentTarget).data("setvalue");
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        alert(this.model.attributes.channels[full_name].ChannelId);
        alert(this.model.attributes.node.NodeId);
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      setChannel: function(channels) {
        var mac,
          _this = this;

        mac = new Array;
        mac[0] = this.model.attributes.macaddress;
        return forge.request.ajax({
          url: Meshable.rooturl + "/api/channel",
          data: JSON.stringify({
            macaddresses: [this.model.attributes.macaddress],
            channelDTO: channels
          }),
          dataType: "json",
          type: "POST",
          timeout: 15000,
          contentType: 'application/json; charset=utf-8',
          error: function(e) {
            Meshable.loading = false;
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            forge.notification.alert("Error", e.message);
            return $(".ui-btn-active").removeClass('ui-btn-active');
          },
          success: function(data) {
            if (data[0].erroronset !== null) {
              forge.notification.alert("Error", data[0].erroronset);
            }
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            $(".ui-btn-active").removeClass('ui-btn-active');
            Meshable.loading = false;
            return Meshable.vent.trigger("goto:refresh");
          }
        });
      }
    });
    nodeCompView = Backbone.Marionette.CompositeView.extend({
      itemView: nodeView,
      template: "#wrapper_ul",
      itemViewContainer: "ul",
      id: "node",
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#placeholder").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:nodeRefresh", function(mac, idn, first, last, phone1, city, state, street1, zip) {
      var _this = this;

      $("body").addClass('ui-disabled');
      $.mobile.showPageLoadingMsg("a", "Loading", false);
      return forge.request.ajax({
        url: Meshable.rooturl + "/api/gateway",
        data: {
          macaddress: mac,
          nodeid: idn
        },
        dataType: "json",
        type: "GET",
        timeout: 15000,
        error: function(e) {
          forge.notification.alert("Error", e.message);
          $.mobile.hidePageLoadingMsg();
          $("body").removeClass('ui-disabled');
          Meshable.loading = false;
          return window.history.back();
        },
        success: function(data) {
          if (data.isAuthenticated === false) {
            return alert("auth:logout");
          } else if (data.length === 0) {
            Meshable.loading = false;
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            forge.notification.alert("No units at this location", "");
            return Backbone.history.navigate("gateways", {
              trigger: false,
              replace: true
            });
          } else {
            data[0].person = new Object({
              first: first,
              last: last,
              phone: phone1,
              city: city,
              state: state,
              street: street1,
              zip: zip
            });
            data[0].company = new Object({
              name: Meshable.company.name,
              zip: Meshable.company.zip,
              city: Meshable.company.city,
              state: Meshable.company.state,
              street: Meshable.company.street,
              email: Meshable.company.email,
              phone: Meshable.company.phone,
              image: Meshable.company.image
            });
            return displayResults(data);
          }
        }
      });
    });
    Meshable.vent.on("goto:node", function(model) {
      return displayResults(model);
    });
    return displayResults = function(data) {
      var drawVisualization, nodeCoView, nodeCollection, problem, tempNode, _i, _len, _ref;

      data[0].userRole = Meshable.userRole;
      nodeCollection = new nodes;
      tempNode = new node;
      nodeCollection.add(tempNode.parse(data));
      nodeCoView = new nodeCompView({
        collection: nodeCollection
      });
      Meshable.currentpage = "node";
      nodeCoView.render();
      $('#mainDiv').empty();
      $('#mainDiv').append($(nodeCoView.el));
      google.load("visualization", "1", {
        packages: ["gauge"]
      });
      drawVisualization = function() {
        data = google.visualization.arrayToDataTable([["Label", "Value"], ["Memory", 80]]);
        return new google.visualization.Gauge(document.getElementById("chart_div")).draw(data);
      };
      drawVisualization();
      $("#mainDiv").trigger('create');
      if (data[0].problems.length > 0) {
        _ref = data[0].problems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          problem = _ref[_i];
          if (problem.level === "RED") {
            $("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>");
          } else if (Meshable.userRole === 1 && problem.level === "YELLOW") {
            $("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>");
          } else if (Meshable.userRole === 1 && problem.level === "BLUE") {
            $("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>");
          }
          $("#mainDiv").trigger('create');
        }
      }
      $('html, body').animate({
        scrollTop: 0
      }, 0);
      $.mobile.hidePageLoadingMsg();
      $("body").removeClass('ui-disabled');
      return Meshable.loading = false;
    };
  });

}).call(this);
