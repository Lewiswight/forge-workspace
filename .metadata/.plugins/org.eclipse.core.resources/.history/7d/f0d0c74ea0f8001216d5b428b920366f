# We need to instantiate the app here
define ['jquery', 'jqm', 'backbone','marionette' ], ($, jqm, Backbone, Marionette) ->  

	#$.support.cors = true
	#$.mobile.allowCrossDomainPages = true

	Meshable = new Backbone.Marionette.Application()
	Meshable.theme = "a"
	Meshable.rooturl = "http://imistaway.com"
	Meshable.current-search = null 
	Meshable.current_units = ""
	Meshable.current_gateways = ""
	Meshable.currentDataObj = ""
	Meshable.current_searchTerm = ""
	Meshable.current_index_gw = 0
	Meshable.current_index = 0
	Meshable.nodeCoView = ""
	Meshable.backplace = ""
	Meshable.nodeCollection = ""
	Meshable.refreshUnits = false
	Meshable.addRegions
		loginRegion: "#login"
		mainRegion: "#mainR"
		searchRegion: "#searchR"
		menuRegion: "#menuR"
	#$("[data-role=footer]").fixedtoolbar({ tapToggle: false })
	#$("[data-role=footer]").fixedtoolbar({ tapToggleBlacklist: "a, button, tap, div, img, input, select, textarea, .ui-header-fixed, .ui-footer-fixed" })
		
	#$(document).on "click", "#menu-btn", ->
  		#Meshable.vent.trigger "click:menu"
	$(document).on "click", "#refresh-btn", ->
		route = Backbone.history.fragment
		if route == "units" or route == "gateways"
			if Meshable.current_index > 0
				Meshable.currentDataObj = ""
			Meshable.current_units = ""
			Meshable.current_gateways = ""
		Meshable.router.navigate "nowhere", trigger : false, replace: true
		Meshable.router.navigate route, trigger : true, replace: true
  		#window.location.reload(false) 
	
	$(document).on "click", "#back-btn", ->
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		window.history.back()
  		
	#$(document).bind('pagechange', ->
	#	$('.ui-page-active .ui-listview').listview('refresh')
	#	$('.ui-page-active :jqmData(role=content)').trigger('create')
		
	#	)

	$("[data-role=footer]").fixedtoolbar({ tapToggle: true })
	$("[data-role=footer]").fixedtoolbar({ tapToggleBlacklist: "a, button, tap, div, img, input, select, textarea, .ui-header-fixed, .ui-footer-fixed" })
	
	Meshable.on "initialize:after", (options) ->
		$.mobile.autoInitializePage = false
		$.mobile.pageContainer = $("body")
		$.mobile.ajaxEnabled = false
		$.mobile.linkBindingEnabled = false
		$.mobile.hashListeningEnabled = false
		$.mobile.pushStateEnabled = true
		$.mobile.loader.prototype.options.text = "loading"
		$.mobile.loader.prototype.options.textVisible = true
		$.mobile.loader.prototype.options.theme = "c"
		#$.mobile.loader.prototype.options.html = ""
		
		#$("div[data-role=\"page\"]").live "pagehide", (event, ui) ->
		#$(event.currentTarget).remove()
		
		Backbone.history.start
			root: window.location.protocol + "//" + window.location.host
			pushState: false

	Meshable.changePage = (page, direction) ->
		$(page.el).attr "data-role", "page"
		$(page.el).attr "data-theme", Meshable.theme
		$.mobile.changePage $(page.el), changeHash: true, reverse: direction, transition: "fade"
		$("#locationbtnn").addClass('ui-btn-active')

	
	starterButton = forge.tabbar.addButton(
	  text: "Starters"
	  icon: "img/RED.png"
	  index: 0
	, (button) ->
	  button.onPressed.addListener ->
	    alert "starter"
	  button.setActive()

	)
	mainButton = forge.tabbar.addButton(
	  text: "Mains"
	  icon: "img/RED.png"
	  index: 1
	, (button) ->
	  button.onPressed.addListener ->
	    alert "main"
	
	)
	dessertButton = forge.tabbar.addButton(
	  text: "Desserts"
	  icon: "img/RED.png"
	  index: 2
	, (button) ->
	  button.onPressed.addListener ->
	    alert "dessert"

	)	
			
				
					
	Meshable.chooseLight = (light) -> 
		if light == "green"
			return "https://s3.amazonaws.com/LynxMVC4-Bucket/green-light.png"
		else if light == "yellow" 
			return "https://s3.amazonaws.com/LynxMVC4-Bucket/yellow-light.png"
		else if light == "red"
			return "https://s3.amazonaws.com/LynxMVC4-Bucket/red-light.png"
		else 
			return "https://s3.amazonaws.com/LynxMVC4-Bucket/no-light.png"

	return Meshable