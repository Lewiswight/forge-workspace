# http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/

# Optional. You will see this name in eg. 'ps' or 'top' command

# Port where we'll run the websocket server

# websocket and http servers

###
Global variables
###

# latest 100 messages

# list of currently connected clients (users)

###
Helper function for escaping input strings
###

inspect = require("eyes").inspector(maxLength: false)

parseString = require("xml2js").parseString
xml = "<sci_request version='1.0'><send_message><targets><device id='00000000-00000000-00409DFF-FF5C1B19'/></targets><rci_request version='1.1'><do_command target='Socket'><data><channel_set name='mc13_[00:13:a2:00:40:9f:29:81]!.r' value='M'/></data></do_command></rci_request></send_message></sci_request>"
parseString xml, (err, result) ->
  console.log result.send_message.targets.device.$.id 



respond = (req, res, next) ->
  keys = []
  for key of clientDict
  	console.log key
  res.send "hello " + clientDict[req.params.name]
restify = require("restify")
server = restify.createServer()
server.get "/hello/:name", respond
server.head "/hello/:name", respond
server.listen 8080, ->
  console.log "%s listening at %s", server.name, server.url




process.title = "node-chat"
webSocketsServerPort = 1337
webSocketServer = require("websocket").server
http = require("http")
history = []
clients = []
clientDict = new Object 
# Array with some colors
colors = ["red", "green", "blue", "magenta", "purple", "plum", "orange"]

# ... in random order
colors.sort (a, b) ->
  Math.random() > 0.5


###
HTTP server
###
server = http.createServer((request, response) ->
)

# Not important for us. We're writing WebSocket server, not HTTP server
server.listen webSocketsServerPort, ->
  console.log (new Date()) + " Server is listening on port " + webSocketsServerPort


###
WebSocket server
###

# WebSocket server is tied to a HTTP server. WebSocket request is just
# an enhanced HTTP request. For more info http://tools.ietf.org/html/rfc6455#page-6





wsServer = new webSocketServer(
	httpServer: server
	keepalive: true
	keepaliveInterval: 1000
	dropConnectionOnKeepaliveTimeout: true
	keepaliveGracePeriod: 2000
)
	

# This callback function is called every time someone
# tries to connect to the WebSocket server
wsServer.on "request", (request) ->
  console.log (new Date()) + " Connection from origin " + request.origin + "."
  
  # accept connection - you should check 'request.origin' to make sure that
  # client is connecting from your website
  # (http://en.wikipedia.org/wiki/Same_origin_policy)
  connection = request.accept(null, request.origin)
  
  # we need to know client index to remove them on 'close' event
  index = clients.push(connection) - 1
  MAC = false
  userColor = false
  console.log (new Date()) + " Connection accepted."
  hbID = false
  
  
  # user sent some message
  connection.on "message", (message) ->
    if message.type is "utf8" # accept only text
      if MAC is false # first message sent by user is their name
      	try
      		msgParts = message.utf8Data.split(":")
      	catch error
      		connection.sendUTF "not connected"
      		return
      	if msgParts[0] == "connect"
      		#need to add validation on this part to make sure the mac is really a mac address
      		MAC = msgParts[1]
      		clientDict[MAC] = connection
      		connection.sendUTF "connected"
      		console.log "connected"
      		
      	else
      		connection.sendUTF "not connected"
      		return
  
        
      else
      	if message.utf8Data == "ping"
      		connection.sendUTF "pong"
      		return
      	console.log "hi"
      	
      	for key of clientDict
      		console.log key
      		clientDict[key].sendUTF message.utf8Data
      	
      	if hbID is false
      		hbID = setInterval(heartbeat, 5000)	
      		
      	


  heartbeat = ->
  	console.log "running heart beat from " + MAC
      		
      		  # user disconnected
  connection.on "close", (connection) ->
  	console.log "exiting"
  	if MAC isnt false
  		#remove client
  		delete clientDict[MAC]
  		MAC = false
  		clearInterval(hbID)
  	###
    if MAC isnt false and userColor isnt false
      console.log (new Date()) + " Peer " + connection.remoteAddress + " disconnected."
     
      # remove user from the list of connected clients
      clients.splice index, 1
      delete clientDict[MAC]
      
      MAC = false 
      clearInterval(hbID)
      
      # push back user's color to be reused by another user
      colors.push userColor
    ###

	

