// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var displayResults, drawChart, drawGauge, drawVisualization, node, nodeCompView, nodeView, nodes;

    node = Backbone.Model.extend({
      initialize: function() {
        return this.set({
          trafficlight: "green"
        });
      },
      defaults: {
        trafficlight: "green"
      }
    });
    nodes = Backbone.Collection.extend({
      model: node
    });
    nodeView = Backbone.Marionette.ItemView.extend({
      initialize: function(node) {
        this.bindTo(this.model, "change", this.render);
        return this.template = "#template-" + node.model.attributes.nodetemplate;
      },
      tagName: 'li',
      onRender: function() {
        var c, c1, c2, chanId, d, d1, datasend, daysBack, div, fromDate, input, nodeId, nodeName, select, selectedval, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;

        Date.prototype.getHtml5String = function() {
          var day, month, year;

          year = this.getFullYear() + "-";
          month = (this.getMonth() + 1) + "-";
          day = this.getDate();
          day = day.toString();
          if (month.length === 2) {
            month = "0" + month;
          }
          if (day.length === 1) {
            day = "0" + day;
          }
          return year + month + day;
        };
        _ref = $(this.el).find("input");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          if (input.id === "toDate") {
            $(input).val(new Date().getHtml5String());
          }
          if (input.id === "fromDate") {
            daysBack = $(input).attr("data-daysofhistory");
            d = new Date();
            d = Math.floor(d);
            d = d - (parseInt(daysBack) * 86400000);
            fromDate = new Date(d).getHtml5String();
            $(input).val(fromDate);
          }
        }
        _ref1 = $(this.el).find("div");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          div = _ref1[_j];
          if ($(div).attr("data-chart") === "chart") {
            nodeName = $(div).attr("data-nodename");
            nodeId = this.model.attributes.node.NodeId;
            chanId = this.model.attributes.channels[nodeName].ChannelId;
            c1 = new Date();
            c = c1.toString();
            c = c.split(" ");
            c2 = c1.getTime() / 1000;
            c2 = Math.floor(c2);
            c2 = c2.toString();
            daysBack = $(div).attr("data-daysofhistory");
            d1 = new Date();
            d1 = d1.getTime() / 1000;
            d1 = Math.floor(d1);
            d1 = d1 - (parseInt(daysBack) * 86400);
            d1 = d1.toString();
            drawChart(div, c2, d1, nodeId, chanId);
          }
          if ($(div).attr("data-chart") === "gauge") {
            drawGauge(div);
          }
        }
        _ref2 = $(this.el).find("select");
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          select = _ref2[_k];
          datasend = $('option:selected', select).attr('data-send');
          if (typeof datasend !== 'undefined') {
            selectedval = this.model.get("channels")[$(select).attr("data-name")].value;
            _results.push($(select).val($(select).find("[data-send=" + selectedval + "]").val()));
          } else {
            if ($(select).attr("data-name")) {
              selectedval = this.model.get("channels")[$(select).attr("data-name")].value;
              _results.push($(select).val($(select).find("[value=" + selectedval + "]").val()));
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      },
      setvalue: function(val, data, chart, options) {
        data.setValue(0, 1, parseInt(val));
        return chart.draw(data, options);
      },
      events: {
        "click .setstatic": "setbutton",
        "slidestop .slider": "sliderSet",
        "change .select_set": "selectSet",
        "click #chart-update": "chartUpdate",
        "click .print": "print"
      },
      print: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data("channel")) + "-" + ($(e.currentTarget).data("setvalue"))
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $('#mainDiv').removeClass($.mobile.activeBtnClass);
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = $('#printInput').val();
        alert(value);
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name,
          mqtt: "true"
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      chartUpdate: function(e) {
        var c1, c2, chanId, d1, dateString, div, nodeId, nodeName, _i, _len, _ref, _results;

        if ($("#fromDate").val() === "" || $("#toDate").val() === "") {
          forge.notification.alert("Error", "You must enter both a start and end date for the graph");
          return;
        }
        _ref = $('div', this.el);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          div = _ref[_i];
          if ($(div).attr("data-chart") === "chart") {
            $("body").addClass('ui-disabled');
            $.mobile.showPageLoadingMsg("a", "Loading", false);
            dateString = $("#toDate").val().replace(/-/g, "/");
            c1 = new Date(dateString);
            c2 = c1.getTime() / 1000;
            c2 = Math.floor(c2);
            c2 = c2.toString();
            dateString = $("#fromDate").val().replace(/-/g, "/");
            d1 = new Date(dateString);
            d1 = d1.getTime() / 1000;
            d1 = Math.floor(d1);
            d1 = d1.toString();
            nodeName = $(div).attr("data-nodename");
            nodeId = this.model.attributes.node.NodeId;
            chanId = this.model.attributes.channels[nodeName].ChannelId;
            _results.push(drawChart(div, c2, d1, nodeId, chanId));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      selectSet: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data)("channel" + "-" + e.currentTarget.value)
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = e.currentTarget.value;
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      sliderSet: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data("channel")) + "-" + e.currentTarget.value
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = e.currentTarget.value;
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      setbutton: function(e) {
        var channel, full_name, localobj, mistData, node_type, param, value;

        param = new Object({
          set: ($(e.currentTarget).data("channel")) + "-" + ($(e.currentTarget).data("setvalue"))
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("set sent to flury");
        }, function(e) {
          return console.log(e);
        });
        $('#mainDiv').removeClass($.mobile.activeBtnClass);
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = $(e.currentTarget).data("setvalue");
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      setChannel: function(channels) {
        var mac,
          _this = this;

        mac = new Array;
        mac[0] = this.model.attributes.macaddress;
        return forge.request.ajax({
          url: Meshable.rooturl + "/api/channel",
          data: JSON.stringify({
            macaddresses: [this.model.attributes.macaddress],
            channelDTO: channels
          }),
          dataType: "json",
          type: "POST",
          timeout: 25000,
          contentType: 'application/json; charset=utf-8',
          error: function(e) {
            Meshable.loading = false;
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            forge.notification.alert("Error", e.message);
            return $(".ui-btn-active").removeClass('ui-btn-active');
          },
          success: function(data) {
            if (data[0].erroronset !== null) {
              forge.notification.alert("Error", data[0].erroronset);
            }
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            $(".ui-btn-active").removeClass('ui-btn-active');
            Meshable.loading = false;
            return Meshable.vent.trigger("goto:refresh");
          }
        });
      }
    });
    nodeCompView = Backbone.Marionette.CompositeView.extend({
      itemView: nodeView,
      template: "#wrapper_ul",
      itemViewContainer: "ul",
      id: "node",
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#placeholder").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:nodeRefresh", function(mac, idn, first, last, phone1, city, state, street1, zip) {
      var _this = this;

      $("body").addClass('ui-disabled');
      $.mobile.showPageLoadingMsg("a", "Loading", false);
      return forge.request.ajax({
        url: Meshable.rooturl + "/api/gateway",
        data: {
          macaddress: mac,
          nodeid: idn
        },
        dataType: "json",
        type: "GET",
        timeout: 15000,
        error: function(e) {
          forge.notification.alert("Error", e.message);
          $.mobile.hidePageLoadingMsg();
          $("body").removeClass('ui-disabled');
          Meshable.loading = false;
          return window.history.back();
        },
        success: function(data) {
          if (data.isAuthenticated === false) {
            return alert("auth:logout");
          } else if (data.length === 0) {
            Meshable.loading = false;
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            forge.notification.alert("No units at this location", "");
            return Backbone.history.navigate("gateways", {
              trigger: false,
              replace: true
            });
          } else {
            data[0].person = new Object({
              first: first,
              last: last,
              phone: phone1,
              city: city,
              state: state,
              street: street1,
              zip: zip
            });
            data[0].company = new Object({
              name: Meshable.company.name,
              zip: Meshable.company.zip,
              city: Meshable.company.city,
              state: Meshable.company.state,
              street: Meshable.company.street,
              email: Meshable.company.email,
              phone: Meshable.company.phone,
              image: Meshable.company.image
            });
            return displayResults(data);
          }
        }
      });
    });
    Meshable.vent.on("goto:node", function(model) {
      return displayResults(model);
    });
    drawGauge = function(div) {
      var chart, data, duration1, greenFrom1, greenTo1, height1, label1, max, min, minorTicks1, options, redFrom1, redTo1, socket, value, width1, yellowFrom1, yellowTo1;

      label1 = $(div).attr("data-label");
      duration1 = $(div).attr("data-duration");
      width1 = $(div).attr("data-width");
      height1 = $(div).attr("data-height");
      redFrom1 = $(div).attr("data-redfrom");
      redTo1 = $(div).attr("data-redto");
      yellowFrom1 = $(div).attr("data-yellowfrom");
      yellowTo1 = $(div).attr("data-yellowto");
      minorTicks1 = $(div).attr("data-minorticks");
      greenFrom1 = $(div).attr("data-greenfrom");
      greenTo1 = $(div).attr("data-greento");
      value = $(div).attr("data-value");
      min = $(div).attr("data-min");
      max = $(div).attr("data-max");
      data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]]);
      options = {
        animation: {
          duration: parseInt(duration1),
          easing: 'inAndOut'
        },
        width: parseInt(width1),
        height: parseInt(width1),
        redFrom: parseInt(redFrom1),
        redTo: parseInt(redTo1),
        yellowFrom: parseInt(yellowFrom1),
        yellowTo: parseInt(yellowTo1),
        minorTicks: parseInt(minorTicks1),
        greenFrom: parseInt(greenFrom1),
        greenTo: parseInt(greenTo1),
        min: parseInt(min),
        max: parseInt(max)
      };
      chart = new google.visualization.Gauge(div);
      chart.draw(data, options);
      data.setValue(0, 1, parseInt(value));
      chart.draw(data, options);
      Meshable.vent.on("update:guage", function(val, timestamp) {
        var IntVal, percent;

        data.setValue(0, 1, parseInt(val));
        chart.draw(data, options);
        Meshable.vent.trigger("update:chart", val, timestamp);
        IntVal = parseInt(val);
        percent = IntVal / 1000;
        percent = percent * 100;
        percent = Math.round(percent);
        $('#level-percent').html("<b>Level: " + percent + "%</b>");
        return $("#mainDiv").trigger('create');
      });
      socket = io.connect("http://50.19.101.205:5000");
      return socket.on("connect", function() {
        var _this = this;

        socket.emit("subscribe", {
          topic: "meshify/db/ctan/B827EB795886/apc_[b8:27:eb:79:58:86:00:02]!/TIMELEFT"
        });
        return socket.on("mqtt", function(msg) {
          return alert(msg.topic + " " + msg.payload);
        });
      });
    };
    drawChart = function(div, c2, d1, nodeId, chanId) {
      var chart, chartLabel, data, dataLabel, options, xLabel,
        _this = this;

      dataLabel = $(div).attr("data-datalabel");
      chartLabel = $(div).attr("data-chartlabel");
      xLabel = $(div).attr("data-xlabel");
      data = new google.visualization.DataTable();
      data.addColumn('date', 'Date');
      data.addColumn('number', dataLabel);
      options = {
        legend: {
          position: "top"
        },
        chartArea: {
          left: "15%",
          top: 50,
          width: "80%",
          height: "50%"
        },
        animation: {
          easing: "inAndOut",
          duration: 2000
        },
        title: chartLabel,
        hAxis: {
          title: xLabel,
          titleTextStyle: {
            color: "#333"
          }
        },
        vAxis: {
          minValue: 0
        }
      };
      chart = new google.visualization.AreaChart(div);
      return forge.request.ajax({
        url: Meshable.rooturl + "/api/Nodechannels",
        data: "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2,
        dataType: "json",
        type: "GET",
        timeout: 15000,
        error: function(e) {
          Meshable.loading = false;
          $("body").removeClass('ui-disabled');
          $.mobile.hidePageLoadingMsg();
          forge.notification.alert("Error", e.message);
          return $(".ui-btn-active").removeClass('ui-btn-active');
        },
        success: function(data1) {
          var d, first, sample, x, y, _i, _len, _ref;

          first = true;
          _ref = data1.listofstreams[0].Stream;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sample = _ref[_i];
            x = sample.x;
            d = new Date(x * 1000);
            y = sample.y;
            data.addRow([d, y]);
            if (first) {
              first = false;
              chart.draw(data, options);
            }
          }
          chart.draw(data, options);
          $("body").removeClass('ui-disabled');
          $.mobile.hidePageLoadingMsg();
          return Meshable.vent.on("update:chart", function(val, timestamp) {
            d = new Date(parseInt(timestamp) * 1000);
            data.addRow([d, parseInt(val)]);
            if (data.getNumberOfRows() > 20) {
              data.removeRow(0);
            }
            return chart.draw(data, options);
          });
        }
      });
    };
    drawVisualization = function() {
      var chart, data, options;

      data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]]);
      options = {
        width: 400,
        height: 120,
        redFrom: 95,
        redTo: 5,
        yellowFrom: 90,
        yellowTo: 10,
        minorTicks: 5
      };
      chart = new google.visualization.Gauge($("#chart2")[0]);
      return [chart, data, options];
    };
    return displayResults = function(data) {
      var nodeCoView, nodeCollection, problem, tempNode, _i, _len, _ref;

      data[0].userRole = Meshable.userRole;
      nodeCollection = new nodes;
      tempNode = new node;
      nodeCollection.add(tempNode.parse(data));
      nodeCoView = new nodeCompView({
        collection: nodeCollection
      });
      Meshable.currentpage = "node";
      nodeCoView.render();
      $('#mainDiv').empty();
      $('#mainDiv').append($(nodeCoView.el));
      $("#mainDiv").trigger('create');
      $("#mainDiv").trigger('create');
      if (data[0].problems.length > 0) {
        _ref = data[0].problems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          problem = _ref[_i];
          if (problem.level === "RED") {
            $("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>");
          } else if (Meshable.userRole === 1 && problem.level === "YELLOW") {
            $("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>");
          } else if (Meshable.userRole === 1 && problem.level === "BLUE") {
            $("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>");
          }
          $("#mainDiv").trigger('create');
        }
      }
      $('html, body').animate({
        scrollTop: 0
      }, 0);
      $.mobile.hidePageLoadingMsg();
      $("body").removeClass('ui-disabled');
      return Meshable.loading = false;
    };
  });

}).call(this);
