// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events', 'async!http://maps.google.com/maps/api/js?sensor=true'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var Map, MapView, geocoder, latlngbounds, locationmaps, mapOpts, markers, onMapBound, onMapRendered;

    Meshable.vent.on("showmap", function() {
      var bindmap;

      Meshable.loading = true;
      Meshable.locationButton.setActive();
      if (Meshable.currentMap === null) {
        Meshable.locationButton.setActive();
        bindmap = function(center) {
          return Meshable.vent.trigger('maps:bind', {
            mapContainerId: 'mapwrapper',
            mapOpts: {
              center: center,
              mapTypeId: google.maps.MapTypeId.ROADMAP
            },
            onMapRendered: function() {
              console.log('on onMapRendered callback');
              return forge.request.ajax({
                url: Meshable.rooturl + '/api/locations?term=' + Meshable.current_searchTerm,
                type: "GET",
                dataType: "json",
                timeout: "20000",
                contentType: 'application/json; charset=utf-8',
                error: function(e) {
                  $("body").removeClass('ui-disabled');
                  $.mobile.hidePageLoadingMsg();
                  Meshable.loading = false;
                  forge.notification.alert("Error", e.message);
                  return Meshable.router.navigate("", {
                    trigger: true
                  });
                },
                success: function(data) {
                  return Meshable.vent.trigger('maps:addmarkers', {
                    items: data
                  });
                }
              });
            }
          });
        };
        return forge.geolocation.getCurrentPosition({
          "enableHighAccuracy": true
        }, function(position) {
          var center;

          center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          return bindmap(center);
        }, function(e) {
          var center;

          center = new google.maps.LatLng(29.7631, -95.3631);
          return bindmap(center);
        });
      } else {
        $('#mainDiv').empty();
        $('#mainDiv').append(Meshable.currentMap);
        if (Meshable.mapRefresh === true) {
          $.mobile.showPageLoadingMsg();
          Meshable.mapRefresh = false;
          Meshable.vent.trigger("clear:markers");
          forge.request.ajax({
            url: Meshable.rooturl + '/api/locations?term=' + Meshable.current_searchTerm,
            type: "GET",
            dataType: "json",
            timeout: "20000",
            contentType: 'application/json; charset=utf-8',
            error: function(e) {
              $("body").removeClass('ui-disabled');
              $.mobile.hidePageLoadingMsg();
              Meshable.loading = false;
              forge.notification.alert("Error", e.message);
              return Meshable.router.navigate("", {
                trigger: true
              });
            },
            success: function(data) {
              var item, _i, _len, _results;

              _results = [];
              for (_i = 0, _len = data.length; _i < _len; _i++) {
                item = data[_i];
                _results.push(Meshable.vent.trigger('maps:addmarker', item));
              }
              return _results;
            }
          });
        }
        $("mainDiv").trigger('create');
        $.mobile.hidePageLoadingMsg();
        $("body").removeClass('ui-disabled');
        Meshable.loading = false;
        console.log('maps bound');
        google.maps.event.trigger(locationmaps, 'resize');
        return Meshable.locationButton.setActive();
      }
    });
    locationmaps = null;
    geocoder = null;
    mapOpts = null;
    onMapBound = null;
    onMapRendered = null;
    markers = [];
    Meshable.vent.on('maps:bind', function(options) {
      var map, mapView;

      console.log('binding maps');
      mapOpts = options.mapOpts;
      onMapBound = options.onMapBound;
      onMapRendered = options.onMapRendered;
      map = new Map;
      mapView = new MapView({
        model: map
      });
      if (onMapBound !== null && onMapBound !== void 0) {
        onMapBound(mapView);
      }
      mapView.render();
      Meshable.currentMap = $(mapView.el);
      $('#mainDiv').empty();
      $('#mainDiv').append($(mapView.el));
      $("mainDiv").trigger('create');
      $.mobile.hidePageLoadingMsg();
      $("body").removeClass('ui-disabled');
      console.log('maps bound');
      Meshable.loading = false;
      google.maps.event.trigger(locationmaps, 'resize');
      return Meshable.locationButton.setActive();
    });
    Meshable.vent.on('maps:geocode', function(options) {
      var fromaddress, geocoderRequest, state;

      console.log('geocoding');
      state = '';
      if (options.address.country && options.address.country.toLowerCase() === 'us') {
        state = options.address.state;
      }
      fromaddress = [options.address.street1, ', ', options.address.street2, ', ', options.address.city, ', ', state, ', ', options.address.country, ', ', options.address.zip].join();
      geocoderRequest = {
        address: fromaddress
      };
      geocoder = new google.maps.Geocoder();
      return geocoder.geocode(geocoderRequest, options.callback);
    });
    latlngbounds = null;
    Meshable.vent.on('maps:addmarkers', function(obj) {
      var i, _i, _ref;

      if (obj.beforeAddMarkers !== null && obj.beforeAddMarkers !== void 0) {
        obj.beforeAddMarkers(locationmaps, markers);
      }
      console.log('adding ' + obj.items.length + ' markers');
      for (i = _i = 0, _ref = obj.items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        Meshable.vent.trigger('maps:addmarker', obj.items[i]);
      }
      locationmaps.fitBounds(latlngbounds);
    });
    Meshable.vent.on('maps:addmarker', function(obj) {
      var clickfunction, position, thisicon, thismarker, thisorigin;

      console.log('adding marker');
      console.log(obj);
      if (obj.address.latitude === 0 || obj.address.longitude === 0) {
        console.log('aborting marker addition, latlng is null');
        return false;
      }
      if (obj.nodecolors.statuscolor === "GREEN") {
        thisorigin = new google.maps.Point(4, 290);
      } else if (obj.nodecolors.statuscolor === "YELLOW") {
        thisorigin = new google.maps.Point(4, 345);
      } else if (obj.nodecolors.statuscolor === "RED") {
        thisorigin = new google.maps.Point(4, 231);
      } else if (obj.nodecolors.statuscolor === "BLUE") {
        thisorigin = new google.maps.Point(4, 398);
      } else {
        thisorigin = new google.maps.Point(4, 398);
      }
      thisicon = new Object({
        url: "https://s3.amazonaws.com/LynxMVC4-Bucket/themes/mistaway/sprite.png",
        size: new google.maps.Size(33, 44, "px", "px"),
        origin: thisorigin
      });
      position = new google.maps.LatLng(obj.address.latitude, obj.address.longitude);
      thismarker = new google.maps.Marker({
        map: locationmaps,
        position: position,
        icon: thisicon
      });
      markers.push(thismarker);
      if (latlngbounds) {
        latlngbounds.extend(position);
      }
      clickfunction = function(gmapMouseEvent) {
        return Meshable.vent.trigger('maps:marker:clicked', obj);
      };
      google.maps.event.addListener(thismarker, "click", clickfunction);
      return console.log('marker added');
    });
    Meshable.vent.on('zoom:location', function() {
      return forge.geolocation.getCurrentPosition({
        "enableHighAccuracy": true
      }, function(position) {
        var center;

        center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        locationmaps.setCenter(center);
        locationmaps.setCenter(center);
        locationmaps.setZoom(14);
        return locationmaps.panTo(center);
      }, function(e) {
        var center;

        center = new google.maps.LatLng(29.7631, -95.3631);
        locationmaps.setCenter(center);
        locationmaps.setZoom(14);
        return locationmaps.panTo(center);
      });
    });
    Meshable.vent.on('clear:markers', function() {
      var marker, _i, _len;

      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        marker = markers[_i];
        marker.setMap(null);
      }
      return markers = [];
    });
    Meshable.vent.on('maps:marker:clicked', function(node) {
      var navPath;

      if (node.person.first === "") {
        node.person.first = "unknown";
      }
      if (node.person.last === "") {
        node.person.last = "unknown";
      }
      if (node.person.phone1 === "") {
        node.person.phone1 = "000-000-0000";
      }
      if (node.address.city === "") {
        node.address.city = "unknown";
      }
      if (node.address.state === "") {
        node.address.state = "unknown";
      }
      if (node.address.street1 === "") {
        node.address.street1 = "unknown";
      }
      if (node.address.zip === "") {
        node.address.zip = "unknown";
      }
      Meshable.location.first = node.person.first;
      Meshable.location.last = node.person.last;
      Meshable.location.phone = node.person.phone1;
      Meshable.location.city = node.person.city;
      Meshable.location.state = node.person.state;
      Meshable.location.street = node.person.street1;
      Meshable.location.zip = node.person.zip;
      navPath = "/unit" + "/" + node.gateway.macaddress + "/" + node.person.first + "/" + node.person.last + "/" + node.person.phone1 + "/" + node.address.city + "/" + node.address.state + "/" + node.address.street1 + "/" + node.address.zip;
      return Meshable.router.navigate(navPath, {
        trigger: true
      });
    });
    Map = Backbone.Model.extend({
      defaults: {
        dummy: "dummy"
      }
    });
    return MapView = Backbone.Marionette.ItemView.extend({
      initialize: function() {
        return console.log('initialize map view');
      },
      onRender: function() {
        console.log('on MapView render');
        setTimeout((function() {
          var mapContainerId;

          mapContainerId = 'mapwrapper';
          locationmaps = new google.maps.Map(document.getElementById(mapContainerId), mapOpts);
          latlngbounds = new google.maps.LatLngBounds();
          if (onMapRendered !== null && onMapRendered !== void 0) {
            return onMapRendered();
          }
        }), 750);
        return console.log('after MapView render');
      },
      addmarker: function(obj) {
        return Meshable.vent.trigger('maps:addmarker', obj);
      },
      template: maptemplate,
      doGeocoding: function(obj, myfunc) {}
    });
  });

}).call(this);
