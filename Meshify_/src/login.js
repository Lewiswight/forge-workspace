// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var AuthModel, AuthPageView, AuthView, collect;

    AuthModel = Backbone.Model.extend({
      defaults: {
        username: "UserName",
        fakepassword: "Password",
        password: "",
        statusmsg: "",
        numberofattempts: 0
      },
      updateMsg: function(msg) {
        return this.set({
          statusmsg: msg
        });
      },
      updateUsername: function(un) {
        return this.set({
          username: un
        });
      },
      updatePassword: function(pw) {
        return this.set({
          password: pw
        });
      }
    });
    collect = Backbone.Collection.extend({
      model: AuthModel
    });
    AuthView = Backbone.Marionette.ItemView.extend({
      initialize: function(AuthModel) {
        this.bindTo(this.model, "change", this.render);
        return this.first = true;
      },
      template: '#auth-template',
      onShow: function() {},
      onRender: function() {
        forge.prefs.get("remember", function(value) {
          var hi;

          if (value === true) {
            forge.prefs.get("username", function(value) {
              return $('#un').val(value);
            });
          }
          return hi = 1;
        });
        return $("#login").trigger('create');
      },
      events: {
        "click #auth-submit-btn": "submitauth"
      },
      focusfakepassword: function() {
        $('#fakepassword-input').hide();
        $('#password-input').show();
        return $('#password-input').focus();
      },
      passwordcheck: function() {
        if ($('#password-input').val() === '') {
          $('#password-input').hide();
          return $('#fakepassword-input').show();
        } else {
          $('#password-input').show();
          return $('#fakepassword-input').hide();
        }
      },
      focususername: function() {
        if ($('#username-input').val() === this.model.defaults.username) {
          $('#username-input').val("");
          return $('#username-input').removeClass('italic');
        }
      },
      submitauth: function() {
        var pass, remember, self, username;

        Meshable.vent.trigger("goto:menu");
        pass = $('#pw').val();
        username = $('#un').val();
        remember = $('#remember-me').prop("checked");
        forge.prefs.set("remember", remember);
        if (remember === true) {
          forge.prefs.set("password", pass);
          forge.prefs.set("username", username);
        }
        self = this;
        $.mobile.showPageLoadingMsg();
        return window.forge.ajax({
          url: "http://devbuildinglynx.apphb.com/api/authentication",
          data: {
            UserName: username,
            Password: pass,
            RememberMe: true
          },
          dataType: "json",
          type: "POST",
          error: function(e) {
            alert("something crazy happened");
            return Meshable.router.navigate("authorized", {
              trigger: true
            });
          },
          success: function(data) {
            if (data.IsAuthenticated === true) {
              return Meshable.router.navigate("gateways", {
                trigger: true
              });
            } else {
              alert("Password and Username Combination not Valid... Please Retry");
              return $.mobile.hidePageLoadingMsg();
            }
          }
        });
      },
      blurpassword: function() {
        if ($('#password-input').val() === '') {
          $('#fakepassword-input').val("Password").show();
          return $('#password-input').hide();
        }
      },
      blurusername: function() {
        var self;

        this.model.updateUsername($('#un').val());
        if ($('#un').val() === this.model.defaults.username) {
          return $('#un').addClass('italic');
        } else {
          self = this;
          return window.forge.ajax({
            url: Meshable.rooturl + "/Account/doesusernameExist",
            data: {
              username: this.model.get("username")
            },
            dataType: "json",
            type: "POST",
            error: function(e) {
              return self.model.updateMsg("Sorry your username is not found!");
            },
            success: function(data) {
              if (data === false) {
                self.model.updateMsg("Awesome, we found your username");
                return $('#pw').focus();
              } else {
                self.model.updateMsg("Sorry, your username isn't in the system");
                return $('#un').focus();
              }
            }
          });
        }
      }
    });
    AuthPageView = Backbone.Marionette.CompositeView.extend({
      id: "home_page",
      template: "#wrapper_home",
      itemView: AuthView,
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#login_page").append(itemView.el);
      }
    });
    return Meshable.vent.on("goto:login", function() {
      var loginView;

      window.forge.ajax({
        url: "http://devbuildinglynx.apphb.com/api/authentication",
        dataType: "json",
        type: "GET",
        error: function(e) {
          return alert("something crazy happened");
        },
        success: function(data) {
          if (data.IsAuthenticated === true) {
            Meshable.vent.trigger("goto:menu");
            Meshable.router.navigate("gateways", {
              trigger: true
            });
          }
        }
      });
      loginView = new AuthPageView({
        collection: new collect(new AuthModel)
      });
      Meshable.currentpage = "login";
      loginView.render();
      $('#login').empty();
      $('#login').append($(loginView.el));
      return Meshable.changePage(loginView, false);
    });
  });

}).call(this);
