// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var displayResults, make_collection, node, nodeCompView, nodeView, nodes;

    make_collection = function() {
      return window.forge.ajax({
        url: "http://devbuildinglynx.apphb.com/api/dashboard",
        dataType: "json",
        type: "GET",
        error: function(e) {
          return alert(e.content);
        },
        success: function(data) {
          var cModel, model, nodeCollection, _i, _len;

          nodeCollection = new dashboards;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            model = data[_i];
            cModel = new dashboard;
            nodeCollection.add(cModel.parse(model));
          }
          return nodeCollection;
        }
      });
    };
    node = Backbone.Model.extend({
      initialize: function() {
        return this.set({
          trafficlight: "green"
        });
      },
      defaults: {
        trafficlight: "green"
      }
    });
    nodes = Backbone.Collection.extend({
      model: node
    });
    nodeView = Backbone.Marionette.ItemView.extend({
      initialize: function(node) {
        return this.bindTo(this.model, "change", this.render);
      },
      template: '#nodeitem-template',
      tagName: 'li',
      className: "list_item_node",
      events: {
        "click .node-item": "displayNode"
      },
      displayNode: function() {
        $.mobile.showPageLoadingMsg();
        return Meshable.vent.trigger("goto:node", this.model.attributes);
      }
    });
    nodeCompView = Backbone.Marionette.CompositeView.extend({
      itemView: nodeView,
      template: "#wrapper_dashboard",
      itemViewContainer: "ul",
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#dashboard_insert").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:nodes", function(macaddress) {
      var _this = this;

      $.mobile.showPageLoadingMsg();
      return window.forge.ajax({
        url: "http://devbuildinglynx.apphb.com/api/gateway",
        data: {
          macaddress: macaddress
        },
        dataType: "json",
        type: "GET",
        error: function(e) {
          return alert("An error occurred while getting node details... sorry!");
        },
        success: function(data) {
          if (data.isAuthenticated === false) {
            return alert("auth:logout");
          } else if (data.length === 0) {
            $.mobile.hidePageLoadingMsg();
            alert("No nodes at this location");
            return Backbone.history.navigate("gateways", {
              trigger: false,
              replace: true
            });
          } else {
            return displayResults(data);
          }
        }
      });
    });
    return displayResults = function(data) {
      var nodeCoView, nodeCollection, obj, tempNode, _i, _j, _len, _len1;

      nodeCollection = new nodes;
      if (data.length < 3) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          obj = data[_i];
          if (obj.nodetemplate !== "mainMistaway") {
            $.mobile.showPageLoadingMsg();
            Meshable.vent.trigger("goto:node", obj);
            return;
          }
        }
      }
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        obj = data[_j];
        if (obj.nodetemplate !== "mainMistaway") {
          tempNode = new node;
          nodeCollection.add(tempNode.parse(obj));
        }
      }
      nodeCoView = new nodeCompView({
        collection: nodeCollection
      });
      Meshable.currentpage = "nodes";
      nodeCoView.render();
      $('#nodes').empty();
      $('#nodes').append($(nodeCoView.el));
      return Meshable.changePage(nodeCoView, false);
    };
  });

}).call(this);
