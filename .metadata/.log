!SESSION 2013-12-09 09:43:07.892 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

This is a continuation of log file /Users/lewiswight/forge-workspace/.metadata/.bak_1.log
Created Time: 2013-12-13 12:33:45.930

!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:45.930
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undeMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7801, length: 0, timestamp: 123
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:46.080
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7802, length: 0, timestamp: 124
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:46.264
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefiMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7803, length: 0, timestamp: 125
text:>i<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:46.368
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefinMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7804, length: 0, timestamp: 126
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:46.464
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefineMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7805, length: 0, timestamp: 127
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:46.616
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefinedMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7806, length: 0, timestamp: 128
text:>d<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:46.960
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefined Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7807, length: 0, timestamp: 129
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:48.504
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefined !Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7808, length: 0, timestamp: 130
text:>!<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:49.728
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefined !=Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7809, length: 0, timestamp: 131
text:>=<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:50.443
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefined != Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7810, length: 0, timestamp: 132
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:52.792
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undefined != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7862, length: 19, timestamp: 133
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:56.541
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and undefined != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7659, length: 91, timestamp: 134
text:><



!ENTRY org.eclipse.ui 4 0 2013-12-13 12:33:57.177
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException: The feature 'dummy' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:733)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:551)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:766)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:742)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:107)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.basicGetEObject(XtextResource.java:305)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:291)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:214)
	at org.eclipse.emf.ecore.resource.impl.ResourceSetImpl.getEObject(ResourceSetImpl.java:223)
	at org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode$2.exec(AbstractOutlineNode.java:198)
	at org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode$2.exec(AbstractOutlineNode.java:1)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:62)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.readOnly(XtextDocument.java:246)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:84)
	at org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode.readOnly(AbstractOutlineNode.java:194)
	at org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode.getChildren(AbstractOutlineNode.java:95)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.findBestNode(OutlineWithEditorLinker.java:136)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.findBestNode(OutlineWithEditorLinker.java:137)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.findBestNode(OutlineWithEditorLinker.java:137)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.findBestNode(OutlineWithEditorLinker.java:137)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.findBestNode(OutlineWithEditorLinker.java:137)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.selectInTreeView(OutlineWithEditorLinker.java:125)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker$TextListener.selectionChanged(OutlineWithEditorLinker.java:69)
	at org.eclipse.jface.text.TextViewer.firePostSelectionChanged(TextViewer.java:2755)
	at org.eclipse.jface.text.TextViewer.firePostSelectionChanged(TextViewer.java:2703)
	at org.eclipse.jface.text.TextViewer$5.run(TextViewer.java:2682)
	at org.eclipse.swt.widgets.Display.timerProc(Display.java:4742)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5518)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationNextEventMatchingMask(Display.java:4918)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5296)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.nextEventMatchingMask(NSApplication.java:94)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:34:57.975
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and () != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7707, length: 9, timestamp: 135
text:>()<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:34:58.487
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (t) != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7708, length: 0, timestamp: 136
text:>t<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:00.271
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (ty) != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7709, length: 0, timestamp: 137
text:>y<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:02.695
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typ) != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7710, length: 0, timestamp: 138
text:>p<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:02.815
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (type) != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7711, length: 0, timestamp: 139
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:03.087
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeo) != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7712, length: 0, timestamp: 140
text:>o<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:03.191
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof) != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7713, length: 0, timestamp: 141
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:05.048
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof != Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7714, length: 1, timestamp: 142
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:09.271
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof ! Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7716, length: 1, timestamp: 143
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:09.427
!MESSAGE org.eclipse.xtext.ui.editor.reconciler.XtextReconciler  - Error while forcing reconciliation

!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:112)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.process(AbstractReadWriteAcces.java:111)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener.performNecessaryUpdates(XtextReconciler.java:109)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.updateContentBeforeRead(XtextDocument.java:165)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:186)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:1)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:61)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.readOnly(XtextDocument.java:246)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:84)
	at org.eclipse.xtext.ui.editor.hover.AbstractEObjectHover.getHoverRegion(AbstractEObjectHover.java:54)
	at org.eclipse.xtext.ui.editor.hover.AbstractCompositeHover.getHoverRegion(AbstractCompositeHover.java:62)
	at org.eclipse.jface.text.TextViewerHoverManager.computeInformation(TextViewerHoverManager.java:140)
	at org.eclipse.jface.text.AbstractInformationControlManager.doShowInformation(AbstractInformationControlManager.java:1131)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager$MouseTracker.mouseHover(AbstractHoverInformationControlManager.java:519)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:208)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4166)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1474)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1279)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4012)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3651)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:09.505
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof  Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7715, length: 1, timestamp: 144
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:09.692
!MESSAGE org.eclipse.xtext.ui.editor.reconciler.XtextReconciler  - Error while forcing reconciliation

!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:112)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.process(AbstractReadWriteAcces.java:111)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener.performNecessaryUpdates(XtextReconciler.java:109)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.updateContentBeforeRead(XtextDocument.java:165)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:186)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:1)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:61)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.readOnly(XtextDocument.java:246)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:84)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob.iternalRefreshOutlineModel(OutlineRefreshJob.java:77)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob$1.run(OutlineRefreshJob.java:66)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob$1.run(OutlineRefreshJob.java:1)
	at org.eclipse.xtext.ui.util.DisplayRunnableWithResult$1.run(DisplayRunnableWithResult.java:25)
	at org.eclipse.ui.internal.UILockListener.doPendingWork(UILockListener.java:164)
	at org.eclipse.ui.internal.UISynchronizer$3.run(UISynchronizer.java:158)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3976)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3653)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:10.231
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7714, length: 1, timestamp: 145
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:10.320
!MESSAGE org.eclipse.xtext.ui.editor.reconciler.XtextReconciler  - Error while forcing reconciliation

!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:112)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.process(AbstractReadWriteAcces.java:111)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener.performNecessaryUpdates(XtextReconciler.java:109)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.updateContentBeforeRead(XtextDocument.java:165)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:186)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:1)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:61)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.readOnly(XtextDocument.java:246)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:84)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob.iternalRefreshOutlineModel(OutlineRefreshJob.java:77)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob$1.run(OutlineRefreshJob.java:66)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob$1.run(OutlineRefreshJob.java:1)
	at org.eclipse.xtext.ui.util.DisplayRunnableWithResult$1.run(DisplayRunnableWithResult.java:25)
	at org.eclipse.ui.internal.UILockListener.doPendingWork(UILockListener.java:164)
	at org.eclipse.ui.internal.UISynchronizer$3.run(UISynchronizer.java:158)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3976)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3653)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:27.790
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress  
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7765, length: 0, timestamp: 146
text:> <



!ENTRY org.eclipse.core.jobs 4 2 2013-12-13 12:35:28.357
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:30.527
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress ! 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7766, length: 0, timestamp: 147
text:>!<



!ENTRY org.eclipse.core.jobs 4 2 2013-12-13 12:35:31.041
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:33.511
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7767, length: 0, timestamp: 148
text:>=<



!ENTRY org.eclipse.core.jobs 4 2 2013-12-13 12:35:34.077
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:35.902
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress !=  
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7768, length: 0, timestamp: 149
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:36.278
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != u 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7769, length: 0, timestamp: 150
text:>u<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:36.494
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != un 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7770, length: 0, timestamp: 151
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:36.598
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != und 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7771, length: 0, timestamp: 152
text:>d<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:36.774
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != unde 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7772, length: 0, timestamp: 153
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:36.926
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undef 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7773, length: 0, timestamp: 154
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:37.102
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undefi 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7774, length: 0, timestamp: 155
text:>i<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:37.182
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undefin 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7775, length: 0, timestamp: 156
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:37.278
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undefine 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7776, length: 0, timestamp: 157
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:37.414
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7777, length: 0, timestamp: 158
text:>d<



!ENTRY org.eclipse.core.jobs 4 2 2013-12-13 12:35:37.936
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:39.839
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undefined) 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7778, length: 0, timestamp: 159
text:>)<



!ENTRY org.eclipse.core.jobs 4 2 2013-12-13 12:35:40.435
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:35:41.870
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		
		
		if Meshable.current_units.size() == 2 and (typeof Meshable.current_units.at(1).attributes.macaddress != undefined)  
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7779, length: 0, timestamp: 160
text:> <


!SESSION 2013-12-18 15:59:09.567 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

!ENTRY org.eclipse.core.resources 2 10035 2013-12-18 15:59:13.332
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.core.net 1 0 2013-12-18 15:59:17.864
!MESSAGE System property http.nonProxyHosts has been set to local|*.local|169.254/16|*.169.254/16 by an external source. This value will be overwritten using the values from the preferences

!ENTRY org.eclipse.wst.jsdt.core 4 4 2013-12-18 15:59:23.140
!MESSAGE error during type inferencing
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.core.infer.InferredAttribute.<init>(InferredAttribute.java:59)
	at org.eclipse.wst.jsdt.core.infer.InferredType.addAttribute(InferredType.java:125)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.populateType(InferEngine.java:1327)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.handlePotentialType(InferEngine.java:925)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.visit(InferEngine.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.DelegateASTVisitor.visit(DelegateASTVisitor.java:526)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.traverse(Assignment.java:224)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:584)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:539)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.doInfer(InferEngine.java:1772)
	at org.eclipse.wst.jsdt.internal.compiler.parser.Parser.inferTypes(Parser.java:7093)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.accept(Compiler.java:231)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.addUnitsContainingBindings(LookupEnvironment.java:179)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:374)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:320)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:575)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.beginToCompile(Compiler.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.compile(Compiler.java:341)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:288)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:86)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:227)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:58)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:291)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:194)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:726)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.wst.jsdt.core 4 4 2013-12-18 15:59:23.142
!MESSAGE error during type inferencing
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.core.infer.InferredAttribute.<init>(InferredAttribute.java:59)
	at org.eclipse.wst.jsdt.core.infer.InferredType.addAttribute(InferredType.java:125)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.populateType(InferEngine.java:1327)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.handlePotentialType(InferEngine.java:925)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.visit(InferEngine.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.DelegateASTVisitor.visit(DelegateASTVisitor.java:526)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.traverse(Assignment.java:224)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:584)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:539)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.doInfer(InferEngine.java:1772)
	at org.eclipse.wst.jsdt.internal.compiler.parser.Parser.inferTypes(Parser.java:7093)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:564)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.beginToCompile(Compiler.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.compile(Compiler.java:341)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:288)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:86)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:227)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:58)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:291)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:194)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:726)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.722
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.746
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.762
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.773
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.790
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.802
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.817
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.834
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.857
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.868
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:31.878
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:33.710
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:33.761
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:33.775
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:33.792
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:33.841
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:33.852
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:34.157
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:34.886
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.196
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.329
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.402
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.402
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.402
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.403
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.403
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.404
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.404
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.404
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.404
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.405
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.407
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.407
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.407
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.408
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.408
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.408
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.408
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.408
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.412
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.413
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.414
!MESSAGE There should only ever be one match for a constructor search but found 5 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.415
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.415
!MESSAGE There should only ever be one match for a constructor search but found 5 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.416
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.433
!MESSAGE There should only ever be one match for a constructor search but found 5 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.434
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.434
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.435
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.435
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.435
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.436
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.436
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:35.436
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:37.411
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:37.470
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:37.564
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:39.430
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:39.459
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:39.527
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:39.688
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:39.715
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:40.496
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:40.651
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:40.677
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:40.743
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2013-12-18 15:59:40.781
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.
!SESSION 2014-01-20 10:55:06.182 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

!ENTRY org.eclipse.core.resources 2 10035 2014-01-20 10:55:10.511
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.core.net 1 0 2014-01-20 10:55:13.572
!MESSAGE System property http.nonProxyHosts has been set to local|*.local|169.254/16|*.169.254/16 by an external source. This value will be overwritten using the values from the preferences

!ENTRY org.eclipse.wst.xml.core 4 4 2014-01-20 11:04:26.726
!MESSAGE Invalid Hierarchy Request
!STACK 0
org.w3c.dom.DOMException: Invalid Hierarchy Request
	at org.eclipse.wst.xml.core.internal.document.ElementImpl.insertBefore(ElementImpl.java:752)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1360)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1334)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1402)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1499)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStructuredDocumentRegion(XMLModelParser.java:1510)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.replaceStructuredDocumentRegions(XMLModelParser.java:2354)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.internalSetNewDocument(DOMModelImpl.java:661)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.setStructuredDocument(DOMModelImpl.java:936)
	at org.eclipse.wst.sse.core.internal.model.AbstractModelLoader.createModel(AbstractModelLoader.java:127)
	at org.eclipse.wst.sse.core.internal.FileBufferModelManager.getModel(FileBufferModelManager.java:852)
	at org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._getModelFor(ModelManagerImpl.java:639)
	at org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.getModelForEdit(ModelManagerImpl.java:1380)
	at org.eclipse.wst.sse.ui.StructuredTextEditor.tryToGetModel(StructuredTextEditor.java:2003)
	at org.eclipse.wst.sse.ui.StructuredTextEditor.doSetInput(StructuredTextEditor.java:1943)
	at org.eclipse.ui.texteditor.AbstractTextEditor$19.run(AbstractTextEditor.java:3212)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:464)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:372)
	at org.eclipse.ui.internal.WorkbenchWindow$13.run(WorkbenchWindow.java:1812)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:1809)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3230)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3257)
	at org.eclipse.wst.sse.ui.StructuredTextEditor.init(StructuredTextEditor.java:2619)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:359)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:306)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:877)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:857)
	at org.eclipse.e4.core.internal.di.InjectorImpl.inject(InjectorImpl.java:119)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:333)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:254)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:162)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:102)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:71)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:53)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:129)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:949)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl$1.handleEvent(PartServiceImpl.java:90)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler$1.run(UIEventHandler.java:41)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:180)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:150)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4650)
	at org.eclipse.e4.ui.internal.workbench.swt.E4Application$1.syncExec(E4Application.java:205)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:197)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:197)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:135)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:78)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:39)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:80)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:58)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:374)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:171)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:576)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:543)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:605)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:585)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:539)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:528)
	at org.eclipse.e4.ui.internal.workbench.renderers.swt.BasicPartList.gotoSelectedElement(BasicPartList.java:154)
	at org.eclipse.e4.ui.internal.workbench.renderers.swt.AbstractTableInformationControl$4.mouseUp(AbstractTableInformationControl.java:245)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:220)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4166)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1474)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1279)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4012)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3651)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.eclipse.wst.common.project.facet.core 4 0 2014-01-20 11:04:26.958
!MESSAGE Version 5.0 of project facet dvt_f7 does not exist. It is used in plugin org.eclipse.wst.common.project.facet.core.tests.
!SESSION 2014-02-04 12:54:14.161 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

!ENTRY org.eclipse.core.net 1 0 2014-02-04 12:54:21.465
!MESSAGE System property http.nonProxyHosts has been set to local|*.local|169.254/16|*.169.254/16 by an external source. This value will be overwritten using the values from the preferences

!ENTRY org.eclipse.wst.xml.core 4 4 2014-02-04 12:54:24.499
!MESSAGE Invalid Hierarchy Request
!STACK 0
org.w3c.dom.DOMException: Invalid Hierarchy Request
	at org.eclipse.wst.xml.core.internal.document.ElementImpl.insertBefore(ElementImpl.java:752)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1360)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1334)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1402)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1499)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStructuredDocumentRegion(XMLModelParser.java:1510)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.replaceStructuredDocumentRegions(XMLModelParser.java:2354)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.internalSetNewDocument(DOMModelImpl.java:661)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.setStructuredDocument(DOMModelImpl.java:936)
	at org.eclipse.wst.sse.core.internal.model.AbstractModelLoader.createModel(AbstractModelLoader.java:127)
	at org.eclipse.wst.sse.core.internal.FileBufferModelManager.getModel(FileBufferModelManager.java:852)
	at org.eclipse.wst.sse.core.internal.model.ModelManagerImpl._getModelFor(ModelManagerImpl.java:639)
	at org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.getModelForEdit(ModelManagerImpl.java:1380)
	at org.eclipse.wst.sse.ui.StructuredTextEditor.tryToGetModel(StructuredTextEditor.java:2003)
	at org.eclipse.wst.sse.ui.StructuredTextEditor.doSetInput(StructuredTextEditor.java:1943)
	at org.eclipse.ui.texteditor.AbstractTextEditor$19.run(AbstractTextEditor.java:3212)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:1753)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3230)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3257)
	at org.eclipse.wst.sse.ui.StructuredTextEditor.init(StructuredTextEditor.java:2619)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:359)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:306)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:877)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:857)
	at org.eclipse.e4.core.internal.di.InjectorImpl.inject(InjectorImpl.java:119)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:333)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:254)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:162)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:102)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:71)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:53)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:129)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:949)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.showTab(StackRenderer.java:1096)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:97)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:649)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$6.run(PartRenderingEngine.java:526)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:511)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:61)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:949)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveRenderer.processContents(PerspectiveRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.showTab(PerspectiveStackRenderer.java:103)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:97)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.postProcess(PerspectiveStackRenderer.java:77)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:649)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:61)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer.processContents(WBWRenderer.java:676)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:706)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:700)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:685)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1042)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.eclipse.wst.common.project.facet.core 4 0 2014-02-04 12:54:24.969
!MESSAGE Version 5.0 of project facet dvt_f7 does not exist. It is used in plugin org.eclipse.wst.common.project.facet.core.tests.

!ENTRY org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for F3:
Binding(F3,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.open.editor,Open Declaration,
		Open an editor on the selected element,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@243de4e8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(F3,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.open.file.from.source,Open Selection,
		Open an editor on the selected link,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5b7f4dee,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,,system)
Binding(F3,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.editor.hyperlinking.OpenDeclaration,Open Declaration,
		Opens the declaration for the currently selected cross reference,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2d57330,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for COMMAND+SHIFT+P:
Binding(COMMAND+SHIFT+P,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.goto.matching.bracket,Matching Character,
		Go to Matching Character,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@58557576,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,,system)
Binding(COMMAND+SHIFT+P,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.GotToMatchingBracketAction,Go to Matching Bracket,
		Go to Matching Bracket,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@b7d55c4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for COMMAND+O:
Binding(COMMAND+O,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.quick_outline,Quick Outline,
		Show the quick outline for the editor input,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5189bcc0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,,system)
Binding(COMMAND+O,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.editor.outline.QuickOutline,Quick Outline,
		Open the quick outline.,
		Category(org.eclipse.core.commands.categories.autogenerated,Uncategorized,Commands that were either auto-generated or have no category,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@29c70b12,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for COMMAND+/:
Binding(COMMAND+/,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.ToggleCommentAction,Toggle Comment,
		Toggle Comment,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4aa7e02b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,,system)
Binding(COMMAND+/,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.add.block.comment,Add Block Comment,
		Add Block Comment,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3cf7939e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,cocoa,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for COMMAND+SHIFT+C:
Binding(COMMAND+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.toggle.comment,Toggle Comment,
		Toggle Comment,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e692377,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,,system)
Binding(COMMAND+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.ToggleCommentAction,Toggle Comment,
		Toggle Comment,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4aa7e02b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for CTRL+SHIFT+ARROW_UP:
Binding(CTRL+SHIFT+ARROW_UP,
	ParameterizedCommand(Command(org.eclipse.wst.xml.ui.previousSibling,Previous Sibling,
		Go to Previous Sibling,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3155d7fc,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,cocoa,system)
Binding(CTRL+SHIFT+ARROW_UP,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.editor.select.enclosing,Select Enclosing Element,
		Expand selection to include enclosing element,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@536e4d57,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,cocoa,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for CTRL+SHIFT+ARROW_LEFT:
Binding(CTRL+SHIFT+ARROW_LEFT,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.structure.select.previous,Select Previous Element,
		Expand selection to include previous sibling,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@c5d4e0f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,cocoa,system)
Binding(CTRL+SHIFT+ARROW_LEFT,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.editor.select.previous,Select Previous Element,
		Expand selection to include previous element,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6e97b58b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,cocoa,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for COMMAND+SHIFT+F:
Binding(COMMAND+SHIFT+F,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.format.document,Format,
		Format selection,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@16da9e38,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,,system)
Binding(COMMAND+SHIFT+F,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.FormatAction,Format,
		Format text,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2a0ff166,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for CTRL+SHIFT+ARROW_DOWN:
Binding(CTRL+SHIFT+ARROW_DOWN,
	ParameterizedCommand(Command(org.eclipse.wst.xml.ui.nextSibling,Next Sibling,
		Go to Next Sibling,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@53b2d028,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,cocoa,system)
Binding(CTRL+SHIFT+ARROW_DOWN,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.editor.select.last,Restore Last Selection,
		Restore last selection from History,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7cb1751c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,cocoa,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2014-02-04 12:55:52.482
!MESSAGE A conflict occurred for CTRL+SHIFT+ARROW_RIGHT:
Binding(CTRL+SHIFT+ARROW_RIGHT,
	ParameterizedCommand(Command(org.eclipse.xtext.ui.editor.select.next,Select Next Element,
		Expand selection to include next element,
		Category(org.eclipse.xtext.ui.category.XtextEditor,Editing,Editing Commands,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@667fc138,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.xtext.ui.XtextEditorScope,,cocoa,system)
Binding(CTRL+SHIFT+ARROW_RIGHT,
	ParameterizedCommand(Command(org.eclipse.wst.sse.ui.structure.select.next,Select Next Element,
		Expand selection to include next sibling,
		Category(org.eclipse.ui.category.edit,Edit,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6c5d7fc2,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.wst.sse.ui.structuredTextEditorScope,,cocoa,system)

!ENTRY org.eclipse.wst.xml.core 4 4 2014-02-05 13:00:13.746
!MESSAGE IStructuredDocumentRegion management failed.
!STACK 0
org.eclipse.wst.xml.core.internal.document.StructuredDocumentRegionManagementException: IStructuredDocumentRegion management failed.
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2258)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2288)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2288)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2288)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.replaceStructuredDocumentRegions(XMLModelParser.java:2339)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.nodesReplaced(DOMModelImpl.java:737)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument._fireEvent(BasicStructuredDocument.java:600)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.fireStructuredDocumentEvent(BasicStructuredDocument.java:1198)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.internalReplaceText(BasicStructuredDocument.java:1979)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2423)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2408)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$2(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$3.run(JobSafeStructuredDocument.java:141)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replaceText(JobSafeStructuredDocument.java:144)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replace(BasicStructuredDocument.java:2368)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$0(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$1.run(JobSafeStructuredDocument.java:103)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replace(JobSafeStructuredDocument.java:106)
	at org.eclipse.jface.text.DefaultDocumentAdapter.replaceTextRange(DefaultDocumentAdapter.java:248)
	at org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:7198)
	at org.eclipse.swt.custom.StyledText.sendKeyEvent(StyledText.java:8030)
	at org.eclipse.swt.custom.StyledText.paste(StyledText.java:7254)
	at org.eclipse.jface.text.TextViewer.paste(TextViewer.java:4086)
	at org.eclipse.jface.text.TextViewer.doOperation(TextViewer.java:4024)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:1018)
	at org.eclipse.jface.text.source.projection.ProjectionViewer.doOperation(ProjectionViewer.java:1507)
	at org.eclipse.wst.sse.ui.internal.StructuredTextViewer.doOperation(StructuredTextViewer.java:473)
	at org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:128)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:126)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:499)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:119)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:243)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:224)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:167)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:499)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:285)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:504)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:555)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:376)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:322)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:84)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1080)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4165)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1474)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1503)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:496)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5648)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:594)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5558)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:221)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2104)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2318)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5620)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5057)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5206)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.eclipse.wst.xml.core 4 4 2014-02-05 13:00:13.771
!MESSAGE Invalid Hierarchy Request
!STACK 0
org.w3c.dom.DOMException: Invalid Hierarchy Request
	at org.eclipse.wst.xml.core.internal.document.ElementImpl.insertBefore(ElementImpl.java:752)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1360)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1334)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1402)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1499)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStructuredDocumentRegion(XMLModelParser.java:1510)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.replaceStructuredDocumentRegions(XMLModelParser.java:2354)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.handleRefresh(DOMModelImpl.java:524)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.nodesReplaced(DOMModelImpl.java:742)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument._fireEvent(BasicStructuredDocument.java:600)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.fireStructuredDocumentEvent(BasicStructuredDocument.java:1198)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.internalReplaceText(BasicStructuredDocument.java:1979)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2423)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2408)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$2(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$3.run(JobSafeStructuredDocument.java:141)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replaceText(JobSafeStructuredDocument.java:144)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replace(BasicStructuredDocument.java:2368)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$0(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$1.run(JobSafeStructuredDocument.java:103)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replace(JobSafeStructuredDocument.java:106)
	at org.eclipse.jface.text.DefaultDocumentAdapter.replaceTextRange(DefaultDocumentAdapter.java:248)
	at org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:7198)
	at org.eclipse.swt.custom.StyledText.sendKeyEvent(StyledText.java:8030)
	at org.eclipse.swt.custom.StyledText.paste(StyledText.java:7254)
	at org.eclipse.jface.text.TextViewer.paste(TextViewer.java:4086)
	at org.eclipse.jface.text.TextViewer.doOperation(TextViewer.java:4024)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:1018)
	at org.eclipse.jface.text.source.projection.ProjectionViewer.doOperation(ProjectionViewer.java:1507)
	at org.eclipse.wst.sse.ui.internal.StructuredTextViewer.doOperation(StructuredTextViewer.java:473)
	at org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:128)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:126)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:499)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:119)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:243)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:224)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:167)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:499)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:285)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:504)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:555)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:376)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:322)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:84)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1080)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4165)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1474)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1503)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:496)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5648)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:594)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5558)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:221)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2104)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2318)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5620)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5057)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5206)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.eclipse.wst.xml.core 4 4 2014-02-05 13:00:17.681
!MESSAGE IStructuredDocumentRegion management failed.
!STACK 0
org.eclipse.wst.xml.core.internal.document.StructuredDocumentRegionManagementException: IStructuredDocumentRegion management failed.
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2258)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2288)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2288)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.removeStructuredDocumentRegion(XMLModelParser.java:2288)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.replaceStructuredDocumentRegions(XMLModelParser.java:2339)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.nodesReplaced(DOMModelImpl.java:737)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument._fireEvent(BasicStructuredDocument.java:600)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.fireStructuredDocumentEvent(BasicStructuredDocument.java:1198)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.internalReplaceText(BasicStructuredDocument.java:1979)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2423)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2408)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$2(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$3.run(JobSafeStructuredDocument.java:141)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replaceText(JobSafeStructuredDocument.java:144)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replace(BasicStructuredDocument.java:2368)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$0(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$1.run(JobSafeStructuredDocument.java:103)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replace(JobSafeStructuredDocument.java:106)
	at org.eclipse.jface.text.DefaultDocumentAdapter.replaceTextRange(DefaultDocumentAdapter.java:248)
	at org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:7198)
	at org.eclipse.swt.custom.StyledText.sendKeyEvent(StyledText.java:8030)
	at org.eclipse.swt.custom.StyledText.paste(StyledText.java:7254)
	at org.eclipse.jface.text.TextViewer.paste(TextViewer.java:4086)
	at org.eclipse.jface.text.TextViewer.doOperation(TextViewer.java:4024)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:1018)
	at org.eclipse.jface.text.source.projection.ProjectionViewer.doOperation(ProjectionViewer.java:1507)
	at org.eclipse.wst.sse.ui.internal.StructuredTextViewer.doOperation(StructuredTextViewer.java:473)
	at org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:128)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:126)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:499)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:119)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:243)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:224)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:167)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:499)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:285)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:504)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:555)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:376)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:322)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:84)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1080)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4165)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1474)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1503)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:496)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5648)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:594)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5558)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:221)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2104)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2318)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5620)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5057)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5206)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.eclipse.wst.xml.core 4 4 2014-02-05 13:00:17.690
!MESSAGE Invalid Hierarchy Request
!STACK 0
org.w3c.dom.DOMException: Invalid Hierarchy Request
	at org.eclipse.wst.xml.core.internal.document.ElementImpl.insertBefore(ElementImpl.java:752)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1360)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertNode(XMLModelParser.java:1334)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1402)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStartTag(XMLModelParser.java:1499)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.insertStructuredDocumentRegion(XMLModelParser.java:1510)
	at org.eclipse.wst.xml.core.internal.document.XMLModelParser.replaceStructuredDocumentRegions(XMLModelParser.java:2354)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.handleRefresh(DOMModelImpl.java:524)
	at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.nodesReplaced(DOMModelImpl.java:742)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument._fireEvent(BasicStructuredDocument.java:600)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.fireStructuredDocumentEvent(BasicStructuredDocument.java:1198)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.internalReplaceText(BasicStructuredDocument.java:1979)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2423)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replaceText(BasicStructuredDocument.java:2408)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$2(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$3.run(JobSafeStructuredDocument.java:141)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replaceText(JobSafeStructuredDocument.java:144)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocument.replace(BasicStructuredDocument.java:2368)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.access$0(JobSafeStructuredDocument.java:1)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument$1.run(JobSafeStructuredDocument.java:103)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.wst.sse.ui.EditorExecutionContext.execute(EditorExecutionContext.java:149)
	at org.eclipse.wst.sse.core.internal.text.JobSafeStructuredDocument.replace(JobSafeStructuredDocument.java:106)
	at org.eclipse.jface.text.DefaultDocumentAdapter.replaceTextRange(DefaultDocumentAdapter.java:248)
	at org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:7198)
	at org.eclipse.swt.custom.StyledText.sendKeyEvent(StyledText.java:8030)
	at org.eclipse.swt.custom.StyledText.paste(StyledText.java:7254)
	at org.eclipse.jface.text.TextViewer.paste(TextViewer.java:4086)
	at org.eclipse.jface.text.TextViewer.doOperation(TextViewer.java:4024)
	at org.eclipse.jface.text.source.SourceViewer.doOperation(SourceViewer.java:1018)
	at org.eclipse.jface.text.source.projection.ProjectionViewer.doOperation(ProjectionViewer.java:1507)
	at org.eclipse.wst.sse.ui.internal.StructuredTextViewer.doOperation(StructuredTextViewer.java:473)
	at org.eclipse.ui.texteditor.TextOperationAction$1.run(TextOperationAction.java:128)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.TextOperationAction.run(TextOperationAction.java:126)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:499)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:119)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:243)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:224)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:167)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:499)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:285)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:504)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:555)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:376)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:322)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:84)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1080)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4165)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1489)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1474)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1503)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1499)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:496)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5648)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:594)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5558)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:221)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2104)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2318)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5620)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5057)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5206)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3648)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)

!ENTRY org.eclipse.jface.text 4 0 2014-02-05 13:00:19.784
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocumentRegion.getStartOffset(BasicStructuredDocumentRegion.java:277)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocumentRegion.getText(BasicStructuredDocumentRegion.java:304)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeTagAttValueHelp(XMLTagInfoHoverProcessor.java:134)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeRegionHelp(XMLTagInfoHoverProcessor.java:111)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeHoverHelp(XMLTagInfoHoverProcessor.java:86)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.getHoverInfo(XMLTagInfoHoverProcessor.java:257)
	at org.eclipse.wst.sse.ui.internal.taginfo.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jface.text 4 0 2014-02-05 13:00:21.378
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocumentRegion.getStartOffset(BasicStructuredDocumentRegion.java:277)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocumentRegion.getText(BasicStructuredDocumentRegion.java:304)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeTagAttValueHelp(XMLTagInfoHoverProcessor.java:134)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeRegionHelp(XMLTagInfoHoverProcessor.java:111)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeHoverHelp(XMLTagInfoHoverProcessor.java:86)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.getHoverInfo(XMLTagInfoHoverProcessor.java:257)
	at org.eclipse.wst.sse.ui.internal.taginfo.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jface.text 4 0 2014-02-05 13:00:34.013
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocumentRegion.getStartOffset(BasicStructuredDocumentRegion.java:277)
	at org.eclipse.wst.sse.core.internal.text.BasicStructuredDocumentRegion.getText(BasicStructuredDocumentRegion.java:304)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeTagAttValueHelp(XMLTagInfoHoverProcessor.java:134)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeRegionHelp(XMLTagInfoHoverProcessor.java:111)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.computeHoverHelp(XMLTagInfoHoverProcessor.java:86)
	at org.eclipse.wst.xml.ui.internal.taginfo.XMLTagInfoHoverProcessor.getHoverInfo(XMLTagInfoHoverProcessor.java:257)
	at org.eclipse.wst.sse.ui.internal.taginfo.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.wst.jsdt.core 4 4 2014-02-05 13:00:43.335
!MESSAGE error during type inferencing
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.core.infer.InferredAttribute.<init>(InferredAttribute.java:59)
	at org.eclipse.wst.jsdt.core.infer.InferredType.addAttribute(InferredType.java:125)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.populateType(InferEngine.java:1327)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.handlePotentialType(InferEngine.java:925)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.visit(InferEngine.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.DelegateASTVisitor.visit(DelegateASTVisitor.java:526)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.traverse(Assignment.java:224)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:584)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:539)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.doInfer(InferEngine.java:1772)
	at org.eclipse.wst.jsdt.internal.compiler.parser.Parser.inferTypes(Parser.java:7093)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.accept(Compiler.java:231)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.addUnitsContainingBindings(LookupEnvironment.java:179)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:374)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:320)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:575)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.beginToCompile(Compiler.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.compile(Compiler.java:341)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:288)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:86)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:227)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:58)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:291)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:194)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:726)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.wst.jsdt.core 4 4 2014-02-05 13:00:43.337
!MESSAGE error during type inferencing
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.core.infer.InferredAttribute.<init>(InferredAttribute.java:59)
	at org.eclipse.wst.jsdt.core.infer.InferredType.addAttribute(InferredType.java:125)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.populateType(InferEngine.java:1327)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.handlePotentialType(InferEngine.java:925)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.visit(InferEngine.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.DelegateASTVisitor.visit(DelegateASTVisitor.java:526)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.traverse(Assignment.java:224)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:584)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:539)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.doInfer(InferEngine.java:1772)
	at org.eclipse.wst.jsdt.internal.compiler.parser.Parser.inferTypes(Parser.java:7093)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:564)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.beginToCompile(Compiler.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.compile(Compiler.java:341)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:288)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:86)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:227)
	at org.eclipse.wst.jsdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:58)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:291)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:194)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:726)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.231
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.258
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.274
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.286
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.303
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.316
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.333
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.349
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.393
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.405
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:52.415
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:54.439
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:54.507
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:54.518
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:54.528
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:56.323
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:56.338
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:56.664
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.324
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.574
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.720
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.795
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.795
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.795
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.796
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.796
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.797
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.797
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.797
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.797
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.798
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.800
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.801
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.801
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.802
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.802
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.802
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.803
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.803
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.807
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.808
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.808
!MESSAGE There should only ever be one match for a constructor search but found 5 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.809
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.809
!MESSAGE There should only ever be one match for a constructor search but found 5 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.810
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.825
!MESSAGE There should only ever be one match for a constructor search but found 5 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.826
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.827
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.827
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.827
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.828
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.828
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.828
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:57.828
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.356
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.390
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.472
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.634
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.668
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.759
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.924
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:58.951
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:00:59.025
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:00.825
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:00.854
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:00.925
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for W. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:00.964
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 4 4 2014-02-05 13:01:04.068
!MESSAGE error during type inferencing
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.core.infer.InferredAttribute.<init>(InferredAttribute.java:59)
	at org.eclipse.wst.jsdt.core.infer.InferredType.addAttribute(InferredType.java:125)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.populateType(InferEngine.java:1327)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.handlePotentialType(InferEngine.java:925)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.visit(InferEngine.java:328)
	at org.eclipse.wst.jsdt.internal.compiler.DelegateASTVisitor.visit(DelegateASTVisitor.java:526)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.traverse(Assignment.java:224)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:584)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:539)
	at org.eclipse.wst.jsdt.core.infer.InferEngine.doInfer(InferEngine.java:1772)
	at org.eclipse.wst.jsdt.internal.compiler.parser.Parser.inferTypes(Parser.java:7093)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.accept(Compiler.java:231)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForBinding(LookupEnvironment.java:282)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:249)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2105)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.Scope.getBinding(Scope.java:1088)
	at org.eclipse.wst.jsdt.internal.compiler.ast.FieldReference.resolveType(FieldReference.java:329)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.resolveType(Assignment.java:161)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Assignment.resolveType(Assignment.java:160)
	at org.eclipse.wst.jsdt.internal.compiler.ast.Expression.resolve(Expression.java:477)
	at org.eclipse.wst.jsdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:394)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.process(Compiler.java:607)
	at org.eclipse.wst.jsdt.internal.compiler.Compiler.compile(Compiler.java:355)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:288)
	at org.eclipse.wst.jsdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:306)
	at org.eclipse.wst.jsdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:227)
	at org.eclipse.wst.jsdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:134)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:302)
	at org.eclipse.wst.jsdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:214)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:726)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:199)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:239)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:292)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:295)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:351)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:374)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:04.500
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:04.524
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:04.531
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:04.537
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:04.544
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:04.551
!MESSAGE There should only ever be one match for a constructor search but found 2 when looking for l. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.005
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.006
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.006
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.006
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.006
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.007
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.007
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.007
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.007
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.007
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.008
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.008
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.009
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.009
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.009
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.009
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.010
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.010
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.012
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.014
!MESSAGE There should only ever be one match for a constructor search but found 3 when looking for TestWriter. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.014
!MESSAGE There should only ever be one match for a constructor search but found 4 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.wst.jsdt.core 2 2 2014-02-05 13:01:06.195
!MESSAGE There should only ever be one match for a constructor search but found 4 when looking for TestReader. Using the first match.

!ENTRY org.eclipse.core.jobs 4 2 2014-02-05 17:35:04.846
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.core.jobs 4 2 2014-02-05 17:35:13.044
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2014-02-05 17:36:27.903
!MESSAGE org.eclipse.xtext.ui.editor.reconciler.XtextReconciler  - Error while forcing reconciliation

!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:112)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.process(AbstractReadWriteAcces.java:111)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$DocumentListener.performNecessaryUpdates(XtextReconciler.java:109)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.updateContentBeforeRead(XtextDocument.java:165)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:186)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.beforeReadOnly(XtextDocument.java:1)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:61)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.readOnly(XtextDocument.java:246)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:84)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob.iternalRefreshOutlineModel(OutlineRefreshJob.java:77)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob$1.run(OutlineRefreshJob.java:66)
	at org.eclipse.xtext.ui.editor.outline.impl.OutlineRefreshJob$1.run(OutlineRefreshJob.java:1)
	at org.eclipse.xtext.ui.util.DisplayRunnableWithResult$1.run(DisplayRunnableWithResult.java:25)
	at org.eclipse.ui.internal.UILockListener.doPendingWork(UILockListener.java:164)
	at org.eclipse.ui.internal.UISynchronizer$3.run(UISynchronizer.java:158)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3976)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3653)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
!SESSION 2014-02-10 10:23:54.429 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

!ENTRY org.eclipse.core.net 1 0 2014-02-10 10:24:02.421
!MESSAGE System property http.nonProxyHosts has been set to local|*.local|169.254/16|*.169.254/16 by an external source. This value will be overwritten using the values from the preferences
