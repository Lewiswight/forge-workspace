!SESSION 2014-02-23 19:11:11.470 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

This is a continuation of log file /Users/lewiswight/forge-workspace/.metadata/.bak_0.log
Created Time: 2014-02-24 01:22:22.102

!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:22.102
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12495, length: 0, timestamp: 157
text:>m<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:22.468
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12496, length: 0, timestamp: 158
text:>.<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:22.812
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.t
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12497, length: 0, timestamp: 159
text:>t<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:22.932
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.ti
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12498, length: 0, timestamp: 160
text:>i<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.004
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.tim
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12499, length: 0, timestamp: 161
text:>m<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.124
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.time
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12500, length: 0, timestamp: 162
text:>e<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.323
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.times
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12501, length: 0, timestamp: 163
text:>s<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.427
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.timest
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12502, length: 0, timestamp: 164
text:>t<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.564
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.timesta
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12503, length: 0, timestamp: 165
text:>a<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.643
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.timestam
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12504, length: 0, timestamp: 166
text:>m<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:23.779
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.timestamp
					for m in m
						alert m
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12505, length: 0, timestamp: 167
text:>p<



!ENTRY org.apache.log4j 4 0 2014-02-24 01:22:29.666
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				for m in msg.payload
					alert m.value
					alert m.timestamp
					
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	#Meshable.vent.trigger "update:guage", dis[0], dis[1]
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12512, length: 24, timestamp: 168
text:><



!ENTRY org.apache.log4j 4 0 2014-02-24 01:24:31.289
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events', 'goog!visualization,1,packages:[corechart,geochart,gauge]'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 
	
	
		
	
			
	node = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend 
		model: node	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
					
			
			@bindTo @model, "change", @render
			@template = "#template-" + node.model.attributes.nodetemplate
			
		tagName: 'li'
		onRender: ->
			
  				
			Date::getHtml5String = ->
			 	year = @getFullYear() + "-"  
			 	month = (@getMonth()+1) + "-"  
			 	day = @getDate()
			 	day = day.toString()
			 	if month.length == 2
			 		month = ("0" + month)
			 	if day.length == 1
			 		day = ("0" + day)
			 	return (year + month + day)
			

			for input in $(@.el).find("input")
				
				if input.id == "toDate"
					$(input).val(new Date().getHtml5String())
				if input.id == "fromDate"
					daysBack = $(input).attr("data-daysofhistory")
					d = new Date()
					d = Math.floor(d)
					d = (d - (parseInt(daysBack) * 86400000))
					fromDate = new Date(d).getHtml5String()
					$(input).val(fromDate)

				
			
			for div in $(@.el).find("div")
				
				
				
				if $(div).attr("data-chart") == "chart"
					
					nodeName = $(div).attr("data-nodename")
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					c1 = new Date()
					c = c1.toString()
					c = c.split(" ")
					#alert (c[2] + " " + c[1] + " " + c[3])
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
		
					
					
					daysBack = $(div).attr("data-daysofhistory")
					
					d1 = new Date()
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = (d1 - (parseInt(daysBack) * 86400))
					d1 = d1.toString()
					
					
					
					drawChart(div, c2, d1, nodeId, chanId)	
					
					
					
				if $(div).attr("data-chart") == "gauge"
					
					drawGauge(div)

			for select in $(@.el).find("select")
				datasend = $('option:selected', select).attr 'data-send'
				if typeof datasend isnt 'undefined'
					#match the model property with the option
					selectedval = @model.get("channels")[$(select).attr("data-name")].value
					$(select).val($(select).find("[data-send=" + selectedval + "]").val())
				else
					if ($(select).attr("data-name"))
						selectedval = @model.get("channels")[$(select).attr("data-name")].value
						$(select).val($(select).find("[value=" + selectedval + "]").val())
            
            
			
			
		setvalue: (val, data, chart, options) -> 
			data.setValue(0, 1, parseInt(val))
			chart.draw data, options
			
		events:
			#"click #mistBtn": "mist"
			#"click #stopBtn": "stop"
			"click .setstatic": "setbutton"
			"slidestop .slider": "sliderSet"
			"change .select_set": "selectSet"
			"click #chart-update": "chartUpdate"
			"click .print": "print"
			
		
		
		print: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $('#printInput').val()
			alert value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
				mqtt: "true"
			mistData[0] = localobj
			@setChannel mistData
		
		
		chartUpdate: (e) ->
			if $("#fromDate").val() == "" or $("#toDate").val() == ""
				forge.notification.alert("Error", "You must enter both a start and end date for the graph")
				return

			for div in $('div', @.el)
				if $(div).attr("data-chart") == "chart"
					
					$("body").addClass('ui-disabled') 
					$.mobile.showPageLoadingMsg("a", "Loading", false)
					
					dateString = $("#toDate").val().replace(/-/g, "/")	
					c1 = new Date(dateString)
					c2 = (c1.getTime() / 1000)
					c2 = Math.floor( c2 )
					c2 = c2.toString()
					
					dateString = $("#fromDate").val().replace(/-/g, "/")
					d1 = new Date(dateString)
					d1 = (d1.getTime() / 1000)
					d1 = Math.floor( d1 )
					d1 = d1.toString()
					
					nodeName = $(div).attr("data-nodename")
					
					nodeId = @model.attributes.node.NodeId
					chanId = @model.attributes.channels[nodeName].ChannelId
					
					drawChart(div, c2, d1, nodeId, chanId)
					
		
		selectSet:(e) ->
			param = new Object {
				set: (($(e.currentTarget).data) "channel" + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData

		sliderSet:(e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" +  (e.currentTarget.value))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)

			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = e.currentTarget.value
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
		
		setbutton: (e) ->
			
			param = new Object {
				set: (($(e.currentTarget).data "channel") + "-" + ($(e.currentTarget).data "setvalue"))
				
			}
			forge.flurry.customEvent(
				"start up"
				param
			, ->
				console.log "set sent to flury"
			, (e) ->
				console.log e
			)
			$('#mainDiv').removeClass($.mobile.activeBtnClass)
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			value = $(e.currentTarget).data "setvalue"
			node_type = $(e.currentTarget).data "nodetype"	
			channel = $(e.currentTarget).data "channel" 
			full_name = node_type + "." + channel
			mistData = new Array
			#alert @model.attributes.channels[full_name].ChannelId
			#alert @model.attributes.node.NodeId
			localobj = 
				ChannelId: @model.attributes.channels[full_name].ChannelId
				value: value
				techName: @model.attributes.channels[full_name].techName
				name: full_name
			mistData[0] = localobj
			@setChannel mistData
			
		
		
		
		setChannel: (channels) -> 
			mac = new Array
			mac[0] = @model.attributes.macaddress
			#add validation
			#find the channels that need to be set 

			forge.request.ajax
				url: Meshable.rooturl + "/api/channel"
				data:  JSON.stringify({macaddresses: [@model.attributes.macaddress], channelDTO: channels})
				dataType: "json"
				type: "POST"
				timeout: 25000
				contentType: 'application/json; charset=utf-8'
				error: (e) ->
					Meshable.loading = false
					$("body").removeClass('ui-disabled') 
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("Error", e.message)
					$(".ui-btn-active").removeClass('ui-btn-active') 
				success: (data) =>
					if data[0].erroronset != null
						forge.notification.alert("Error", data[0].erroronset)
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					$(".ui-btn-active").removeClass('ui-btn-active')
					Meshable.loading = false
					Meshable.vent.trigger "goto:refresh"


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		id: "node"
		
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el) 

	
	Meshable.vent.on "goto:nodeRefresh", (mac, idn, first, last, phone1, city, state, street1, zip) ->
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		forge.request.ajax
			url: Meshable.rooturl + "/api/gateway"
			data: {  macaddress: mac, nodeid: idn  }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$.mobile.hidePageLoadingMsg()
				$("body").removeClass('ui-disabled')
				Meshable.loading = false
				window.history.back()
			success: (data) =>
				if data.isAuthenticated == false
					alert "auth:logout"
				else if data.length == 0
					Meshable.loading = false
					$("body").removeClass('ui-disabled')
					$.mobile.hidePageLoadingMsg()
					forge.notification.alert("No units at this location", "") 
					Backbone.history.navigate "gateways", trigger : false , replace: true
				else
					data[0].person = new Object {
						first: first
						last: last
						phone: phone1
						city: city
						state: state
						street: street1
						zip: zip
					}
					data[0].company = new Object {
						name: Meshable.company.name
						zip: Meshable.company.zip
						city: Meshable.company.city
						state: Meshable.company.state
						street: Meshable.company.street
						email: Meshable.company.email
						phone: Meshable.company.phone
						image: Meshable.company.image
					}
					displayResults data
	
	
	Meshable.vent.on "goto:node", (model) ->
		
	
		displayResults model
		
		
	
	drawGauge = (div) ->
		
		label1 = $(div).attr("data-label")
		duration1 = $(div).attr("data-duration")
		width1 = $(div).attr("data-width")
		height1 = $(div).attr("data-height")
		redFrom1 = $(div).attr("data-redfrom")
		redTo1 = $(div).attr("data-redto")
		yellowFrom1 = $(div).attr("data-yellowfrom")
		yellowTo1 = $(div).attr("data-yellowto")
		minorTicks1 = $(div).attr("data-minorticks")
		greenFrom1 = $(div).attr("data-greenfrom")
		greenTo1 = $(div).attr("data-greento")
		value = $(div).attr("data-value")
		min = $(div).attr("data-min")
		max = $(div).attr("data-max")
		
		
		data = google.visualization.arrayToDataTable([["Label", "Value"], [label1, 0]])
		options =
			animation:
				duration: parseInt(duration1)
				easing: 'inAndOut'
			width: parseInt(width1)
			height: parseInt(width1)
			redFrom: parseInt(redFrom1)
			redTo: parseInt(redTo1)
			yellowFrom: parseInt(yellowFrom1)
			yellowTo: parseInt(yellowTo1)
			minorTicks: parseInt(minorTicks1)
			greenFrom: parseInt(greenFrom1)
			greenTo: parseInt(greenTo1)
			min: parseInt(min)
			max: parseInt(max)
		    
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge(div)
		chart.draw data, options
		
		data.setValue(0, 1, parseInt(value))
		chart.draw data, options
		
		Meshable.vent.on "update:guage", (val, timestamp) ->
			data.setValue 0, 1, parseInt(val)
			chart.draw data, options
			Meshable.vent.trigger "update:chart", val, timestamp

			IntVal = parseInt(val)

			percent = (IntVal / 1000)
			percent = percent * 100
			percent = Math.round(percent)
			

			#percent = parseInt(percent)
			#percent = percent.toSring()
			#alert percent
			$('#level-percent').html ("<b>Level: " + percent + "%</b>")

			$("#mainDiv").trigger('create')
			#d = new Date(0)
			#timeInt = parseInt(timestamp)
			#d.setUTCSeconds(timeInt)
		
		
		socket = io.connect("http://ws.meshify.com:80")
		socket.on "connect", ->
		
			socket.emit "subscribe",
		    	topic: "meshify/db/ctan/C49300007B94/apgus_[c4:93:00:00:7b:94:00:01]!/raw"
			socket.on "mqtt", (msg) =>
				msg.payload = $.parseJSON( msg.payload )
				
					
		    	#alert msg.topic + " " + msg.payload
		    	#dis = msg.payload.split(";")
		    	#alert parseInt(dis[0])
		    	Meshable.vent.trigger "update:guage", msg.payload.value, msg.payload.timestamp
		    	
		    	#data.setValue(0, 0, label1)
				#data.setValue(0, 1, parseInt(d[0]))
				#chart.draw data, options
	
	drawChart = (div, c2, d1, nodeId, chanId) ->
	
		
		dataLabel = $(div).attr("data-datalabel")
		chartLabel = $(div).attr("data-chartlabel")
		xLabel = $(div).attr("data-xlabel")
		
		data = new google.visualization.DataTable()
		data.addColumn('date', 'Date')
		data.addColumn('number', dataLabel)
		options =
			legend:
				position: "top"
			chartArea:{left:"15%",top:50,width:"80%",height:"50%"}
			animation:
				easing: "inAndOut"
				duration: 2000
			title: chartLabel
			hAxis:
				title: xLabel
				titleTextStyle:
					color: "#333"
	
			vAxis:
				minValue: 0
	
		chart = new google.visualization.AreaChart(div)
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Nodechannels"
			data:  "nodelist[0][NodeId]=" + nodeId + "&nodelist[0][ChannelId]=" + chanId + "&start=" + d1 + "&end=" + c2
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) ->
				Meshable.loading = false
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				forge.notification.alert("Error", e.message)
				$(".ui-btn-active").removeClass('ui-btn-active') 
			success: (data1) =>
				first = true
				for sample in data1.listofstreams[0].Stream
					x = sample.x
					d = new Date(x*1000)
					#d.setTime(x*1000)
					y = sample.y
					#alert x
					#alert y
					
					
					data.addRow([d, y])
					if first
						first = false
						chart.draw data, options
						
				chart.draw data, options
				$("body").removeClass('ui-disabled') 
				$.mobile.hidePageLoadingMsg()
				
				Meshable.vent.on "update:chart", (val, timestamp) ->
					d = new Date(parseInt(timestamp)*1000)
					data.addRow([d, parseInt(val)])
					if data.getNumberOfRows() > 20
						data.removeRow(0)
					chart.draw data, options
				
				
			
	drawVisualization = ->
  
		# Create and populate the data table.
		data = google.visualization.arrayToDataTable([["Label", "Value"], ["Tank1", 80]])
		options =
		    width: 400
		    height: 120
		    redFrom: 95
		    redTo: 5
		    yellowFrom: 90
		    yellowTo: 10
		    minorTicks: 5
		  
		# Create and draw the visualization.
		chart = new google.visualization.Gauge($("#chart2")[0])
		return [chart, data, options]
	displayResults = (data) ->
		
		
		# check here to see if we are a mc3, mc3z, mc13, or mc13z or gate and so on
		data[0].userRole = Meshable.userRole
		nodeCollection = new nodes

		tempNode = new node 
		nodeCollection.add tempNode.parse(data)
		nodeCoView = new nodeCompView
			collection: nodeCollection
	
		
		
		

			
		Meshable.currentpage = "node"
		
		nodeCoView.render()
		
		$('#mainDiv').empty()
		$('#mainDiv').append($(nodeCoView.el))
		$("#mainDiv").trigger('create')
		#chart = drawVisualization()
		#chart[0].draw chart[1], chart[2] 

		
		$("#mainDiv").trigger('create')
		if data[0].problems.length > 0
			for problem in data[0].problems
				if problem.level == "RED"
					$("#results_insert").prepend("<li style='background-color: lightcoral;'>" + problem.message + "</li>")
				else if Meshable.userRole == 1 and problem.level == "YELLOW"
					$("#results_insert").prepend("<li style='background-color: lightyellow;'>" + problem.message + "</li>")	
				else if Meshable.userRole == 1 and problem.level == "BLUE"
					$("#results_insert").prepend("<li style='background-color: lightblue;'>" + problem.message + "</li>")	
				$("#mainDiv").trigger('create')
		$('html, body').animate({scrollTop: 0}, 0)
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
	
				
		
		
		
					
				
				
				
		

		
			
	<<<
Document event: offset: 12444, length: 62, timestamp: 188
text:><



!ENTRY org.eclipse.core.jobs 4 2 2014-02-24 01:38:05.434
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.core.jobs 4 2 2014-02-24 01:38:12.818
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
!SESSION 2014-02-27 12:00:28.179 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

!ENTRY org.eclipse.core.net 1 0 2014-02-27 12:00:36.472
!MESSAGE System property http.nonProxyHosts has been set to local|*.local|169.254/16|*.169.254/16 by an external source. This value will be overwritten using the values from the preferences
