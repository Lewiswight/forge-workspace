// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var AuthModel, AuthPageView, AuthView, collect;

    AuthModel = Backbone.Model.extend({
      defaults: {
        username: "UserName",
        fakepassword: "Password",
        password: "",
        statusmsg: "",
        numberofattempts: 0
      },
      updateMsg: function(msg) {
        return this.set({
          statusmsg: msg
        });
      },
      updateUsername: function(un) {
        return this.set({
          username: un
        });
      },
      updatePassword: function(pw) {
        return this.set({
          password: pw
        });
      }
    });
    collect = Backbone.Collection.extend({
      model: AuthModel
    });
    AuthView = Backbone.Marionette.ItemView.extend({
      initialize: function(AuthModel) {
        this.bindTo(this.model, "change", this.render);
        return this.first = true;
      },
      template: '#auth-template',
      onShow: function() {},
      onRender: function() {
        forge.prefs.get("remember", function(value) {
          var hi;

          if (value === true) {
            forge.prefs.get("password", function(value) {
              return $('#pw').val(value);
            });
            forge.prefs.get("username", function(value) {
              $('#un').val(value);
              return $('#unNew').val(value);
            });
          }
          return hi = 1;
        });
        return $("#login").trigger('create');
      },
      events: {
        "click #auth-submit-btn": "submitauth",
        "click #getnewpass": "openPopup",
        "click #newPas": "newPassword"
      },
      openPopup: function() {
        return $("#popupBasic").popup('open');
      },
      focusfakepassword: function() {
        $('#fakepassword-input').hide();
        $('#password-input').show();
        return $('#password-input').focus();
      },
      passwordcheck: function() {
        if ($('#password-input').val() === '') {
          $('#password-input').hide();
          return $('#fakepassword-input').show();
        } else {
          $('#password-input').show();
          return $('#fakepassword-input').hide();
        }
      },
      focususername: function() {
        if ($('#username-input').val() === this.model.defaults.username) {
          $('#username-input').val("");
          return $('#username-input').removeClass('italic');
        }
      },
      submitauth: function() {
        var demoGraph, param, pass, remember, self, username;

        pass = $('#pw').val();
        username = $('#un').val();
        remember = $('#remember-me').prop("checked");
        forge.prefs.set("remember", remember);
        forge.prefs.set("username", username);
        if (remember === true) {
          forge.prefs.set("password", pass);
        }
        demoGraph = new Object({
          user_id: username
        });
        forge.flurry.setDemographics(demoGraph, function() {
          return console.log("demographics sent");
        }, function(e) {
          return console.log(e);
        });
        param = new Object({
          login: username
        });
        forge.flurry.customEvent("start up", param, function() {
          return console.log("startup sent to flury");
        }, function(e) {
          return console.log(e);
        });
        forge.geolocation.getCurrentPosition(function(position) {
          return forge.flurry.setLocation(position.coords);
        });
        self = this;
        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        if (!forge.is.connection.connected()) {
          forge.notification.alert("Login Failed", "No Internet Connection");
          $("body").removeClass('ui-disabled');
          return $.mobile.hidePageLoadingMsg();
        } else {
          return forge.request.ajax({
            url: Meshable.rooturl + "/api/authentication/login",
            type: "POST",
            dataType: "json",
            timeout: "10000",
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({
              "UserName": $('#un').val(),
              "Password": $('#pw').val(),
              "RememberMe": $('#remember-me').prop("checked"),
              "AppType": "web"
            }),
            error: function(e) {
              $("body").removeClass('ui-disabled');
              $.mobile.hidePageLoadingMsg();
              forge.notification.alert("Error", e.message);
              return Meshable.router.navigate("", {
                trigger: true
              });
            },
            success: function(data) {
              var channelName, error, itm, role, usrR, _i, _len, _ref;

              if (data.IsAuthenticated === true) {
                /*addTemplate = (file) ->
                								forge.file.string file, (string) ->
                										$('body').append(string)
                									 
                							checkCachedTemplate = (templateName) ->
                								forge.prefs.get templateName, (file) ->
                									if file == null
                										cacheTemplate()
                										return
                									
                									forge.file.isFile file, (isFile) ->
                								    	
                							            if isFile == false
                							            	
                							                #msg = "File no longer available"
                							                #forge.notification.alert("Message", msg)  
                							                cacheTemplate()
                							            else
                							                #msg = "Template available Locally"
                							                #forge.notification.alert("Message", msg) 
                							                addTemplate file
                							
                							cacheTemplate = ->
                								forge.file.cacheURL "https://s3.amazonaws.com/LynxMVC4-Bucket/template-apgus.html", (file) ->
                									#alert "template cached"
                									
                									#$('body').append(forge.file.sting(file))
                							    	# File cached save the file object for later
                									forge.prefs.set "template-apgus1", file, ->
                							      		#alert "templated saved" 
                							      		addTemplate file
                							    							      		
                							checkCachedTemplate "template-apgus1"
                */

                forge.parse.push.subscribedChannels((function(channels) {
                  var channel, _i, _len, _results;

                  _results = [];
                  for (_i = 0, _len = channels.length; _i < _len; _i++) {
                    channel = channels[_i];
                    _results.push(forge.parse.push.unsubscribe(channel, (function() {
                      return forge.logging.info("no more notifications from: " + channel);
                    }), function(err) {
                      return forge.logging.error("couldn't unsubscribe from beta-tester notifications: " + JSON.stringify(err));
                    }));
                  }
                  return _results;
                }), function(err) {
                  return forge.logging.error("couldn't retreive subscribed channels: " + JSON.stringify(err));
                });
                channelName = $('#un').val();
                channelName = channelName.replace("@", "");
                channelName = channelName.replace(/\./g, '');
                channelName = channelName.toLowerCase();
                forge.event.messagePushed.addListener(function(msg) {
                  return forge.notification.alert("Message", msg.alert);
                });
                forge.parse.push.subscribe(channelName, (function() {}, forge.logging.info("subscribed to: " + channelName)), function(err) {
                  return forge.logging.error("error subscribing to : " + JSON.stringify(err));
                });
                forge.parse.push.subscribe("company" + JSON.stringify(data.company.CompanyId), (function() {
                  return forge.logging.info("subscribed to: " + channelName);
                }), function(err) {
                  return forge.logging.error("error subscribing to : " + JSON.stringify(err));
                });
                forge.parse.push.subscribe("parent" + JSON.stringify(data.company.Parent_CompanyId), (function() {
                  return forge.logging.info("subscribed to: " + channelName);
                }), function(err) {
                  return forge.logging.error("error subscribing to : " + JSON.stringify(err));
                });
                Meshable.company.zip = data.company.Address.zip;
                Meshable.company.city = data.company.Address.city;
                Meshable.company.state = data.company.Address.state;
                Meshable.company.street = data.company.Address.street1;
                Meshable.company.name = data.company.Name;
                Meshable.company.email = data.company.email;
                Meshable.company.phone = data.company.phone;
                Meshable.company.image = data.company.mobileLogoUrl;
                Meshable.user.FirstName = data.person.first;
                Meshable.user.LastName = data.person.last;
                Meshable.user.Phone = data.person.phone1;
                Meshable.user.Email = data.person.UserObj.Username;
                for (itm in Meshable.company) {
                  if (Meshable.company[itm] === null) {
                    Meshable.company[itm] = "";
                  }
                }
                try {
                  Meshable.userRole = 1;
                  _ref = data.roles;
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    role = _ref[_i];
                    if (role === "MOBILE_ONLY") {
                      Meshable.userRole = 0;
                    }
                  }
                  if (Meshable.userRole === 1) {
                    usrR = "Dealer/Admin";
                  } else {
                    usrR = "Mobile Only";
                  }
                  param = new Object({
                    UserType: usrR
                  });
                  forge.flurry.customEvent("start up", param, function() {
                    return console.log("set sent to flury");
                  }, function(e) {
                    return console.log(e);
                  });
                } catch (_error) {
                  error = _error;
                  Meshable.userRole = 1;
                }
                $.mobile.changePage($("#mainPage"), {
                  changeHash: false,
                  reverse: false,
                  transition: "fade"
                });
                $.mobile.showPageLoadingMsg("a", "Loading", false);
                return Meshable.router.navigate("units", {
                  trigger: true
                });
              } else {
                forge.notification.alert("Login Failed", "Password or Username not valid");
                $("body").removeClass('ui-disabled');
                return $.mobile.hidePageLoadingMsg();
              }
            }
          });
        }
      },
      blurpassword: function() {
        if ($('#password-input').val() === '') {
          $('#fakepassword-input').val("Password").show();
          return $('#password-input').hide();
        }
      }
    });
    AuthPageView = Backbone.Marionette.CompositeView.extend({
      id: "home_page",
      template: "#wrapper_home",
      itemView: AuthView,
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#login_page").append(itemView.el);
      }
    });
    Meshable.vent.on("new:password", function() {
      return forge.request.ajax({
        url: Meshable.rooturl + "/api/authentication/username",
        data: {
          username: $('#unNew').val()
        },
        dataType: "json",
        type: "GET",
        error: function(e) {
          $("body").removeClass('ui-disabled');
          $.mobile.hidePageLoadingMsg();
          return forge.notification.alert("Error", "email address doesn't match your account");
        },
        success: function(data) {
          return forge.request.ajax({
            url: Meshable.rooturl + "/api/authentication/sendEmail",
            data: {
              UserName: "lewis@meshify.com"
            },
            dataType: "json",
            type: "POST",
            error: function(e) {
              $("body").removeClass('ui-disabled');
              $.mobile.hidePageLoadingMsg();
              return forge.notification.alert("Error", e.message);
            },
            success: function(data) {
              forge.notification.alert("Success", "Check you inbox for instructions on how to retrieve your password");
              return $("#popupBasic").popup('close');
            }
          });
        }
      });
    });
    return Meshable.vent.on("goto:login", function() {
      var loginView;

      $.mobile.showPageLoadingMsg("a", "Loading", false);
      forge.topbar.hide(function() {}, console.log("hi", function(e) {
        return console.log(e);
      }));
      forge.tabbar.hide(function() {}, console.log("hi", function(e) {
        return console.log(e);
      }));
      if (!forge.is.connection.connected()) {
        loginView = new AuthPageView({
          collection: new collect(new AuthModel)
        });
        Meshable.currentpage = "login";
        loginView.render();
        $('#login').empty();
        $('#login').append($(loginView.el));
        return Meshable.changePage(loginView, false);
      } else {
        return forge.request.ajax({
          url: Meshable.rooturl + "/api/authentication",
          dataType: "json",
          type: "GET",
          timeout: 30000,
          success: function(data) {
            var error, itm, param, role, usrR, _i, _len, _ref;

            if (data.IsAuthenticated === true) {
              /*addTemplate = (file) ->
              								forge.file.string file, (string) ->
              										$('body').append(string)
              									 
              							checkCachedTemplate = (templateName) ->
              								forge.prefs.get templateName, (file) ->
              									if file == null
              										cacheTemplate()
              										return
              									
              									forge.file.isFile file, (isFile) ->
              								    	
              							            if isFile == false
              							            	
              							                #msg = "File no longer available"
              							                #forge.notification.alert("Message", msg)  
              							                cacheTemplate()
              							            else
              							                #msg = "Template available Locally"
              							                #forge.notification.alert("Message", msg) 
              							                addTemplate file
              							
              							cacheTemplate = ->
              								forge.file.cacheURL "https://s3.amazonaws.com/LynxMVC4-Bucket/template-apgus.html", (file) ->
              									#alert "template cached"
              									
              									#$('body').append(forge.file.sting(file))
              							    	# File cached save the file object for later
              									forge.prefs.set "template-apgus1", file, ->
              							      		#alert "templated saved" 
              							      		addTemplate file
              							    
              							      		
              							checkCachedTemplate "template-apgus1"
              */

              Meshable.company.zip = data.company.Address.zip;
              Meshable.company.city = data.company.Address.city;
              Meshable.company.state = data.company.Address.state;
              Meshable.company.street = data.company.Address.street1;
              Meshable.company.name = data.company.Name;
              Meshable.company.email = data.company.email;
              Meshable.company.phone = data.company.phone;
              Meshable.company.image = data.company.mobileLogoUrl;
              Meshable.user.FirstName = data.person.first;
              Meshable.user.LastName = data.person.last;
              Meshable.user.Phone = data.person.phone1;
              Meshable.user.Email = data.person.UserObj.Username;
              for (itm in Meshable.company) {
                if (Meshable.company[itm] === null) {
                  Meshable.company[itm] = "";
                }
              }
              try {
                Meshable.userRole = 1;
                _ref = data.roles;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  role = _ref[_i];
                  if (role === "MOBILE_ONLY") {
                    Meshable.userRole = 0;
                  }
                }
                if (Meshable.userRole === 1) {
                  usrR = "Dealer/Admin";
                } else {
                  usrR = "Mobile Only";
                }
                param = new Object({
                  UserType: usrR
                });
                forge.flurry.customEvent("start up", param, function() {
                  return console.log("set sent to flury");
                }, function(e) {
                  return console.log(e);
                });
              } catch (_error) {
                error = _error;
                Meshable.userRole = 1;
              }
              forge.prefs.get("username", function(value) {
                var username;

                username = value;
                param = new Object({
                  login: username
                });
                return forge.flurry.customEvent("start up", param, function() {
                  return console.log("startup sent to flury");
                }, function(e) {
                  return console.log(e);
                });
              });
              forge.geolocation.getCurrentPosition(function(position) {
                return forge.flurry.setLocation(position.coords);
              });
              $("body").addClass('ui-disabled');
              $.mobile.showPageLoadingMsg("a", "Loading", false);
              $.mobile.changePage($("#mainPage"), {
                changeHash: false,
                reverse: false,
                transition: "fade"
              });
              $.mobile.showPageLoadingMsg("a", "Loading", false);
              Meshable.router.navigate("units", {
                trigger: true
              });
            } else {
              loginView = new AuthPageView({
                collection: new collect(new AuthModel)
              });
              Meshable.currentpage = "login";
              loginView.render();
              $('#login').empty();
              $('#login').append($(loginView.el));
              return Meshable.changePage(loginView, false);
            }
          }
        });
      }
    });
  });

}).call(this);
