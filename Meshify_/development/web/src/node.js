// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var displayResults, node, nodeCompView, nodeView, nodes;

    node = Backbone.Model.extend({
      initialize: function() {
        return this.set({
          trafficlight: "green"
        });
      },
      defaults: {
        trafficlight: "green"
      }
    });
    nodes = Backbone.Collection.extend({
      model: node
    });
    nodeView = Backbone.Marionette.ItemView.extend({
      initialize: function(node) {
        this.bindTo(this.model, "change", this.render);
        return this.template = "#template-" + node.model.attributes.nodetemplate;
      },
      tagName: 'li',
      events: {
        "click .setstatic": "setbutton"
      },
      setbutton: function(e) {
        var channel, full_name, localobj, mistData, node_type, value;

        $("body").addClass('ui-disabled');
        $.mobile.showPageLoadingMsg("a", "Loading", false);
        value = $(e.currentTarget).data("setvalue");
        node_type = $(e.currentTarget).data("nodetype");
        channel = $(e.currentTarget).data("channel");
        full_name = node_type + "." + channel;
        mistData = new Array;
        localobj = {
          ChannelId: this.model.attributes.channels[full_name].ChannelId,
          value: value,
          techName: this.model.attributes.channels[full_name].techName,
          name: full_name
        };
        mistData[0] = localobj;
        return this.setChannel(mistData);
      },
      setChannel: function(channels) {
        var mac,
          _this = this;

        mac = new Array;
        mac[0] = this.model.attributes.macaddress;
        return window.forge.ajax({
          url: Meshable.rooturl + "/api/channel",
          data: JSON.stringify({
            macaddresses: [this.model.attributes.macaddress],
            channelDTO: channels
          }),
          dataType: "json",
          type: "POST",
          contentType: 'application/json; charset=utf-8',
          error: function(e) {
            $("body").removeClass('ui-disabled');
            return $.mobile.hidePageLoadingMsg();
          },
          success: function(data) {
            $("body").removeClass('ui-disabled');
            return $.mobile.hidePageLoadingMsg();
          }
        });
      }
    });
    nodeCompView = Backbone.Marionette.CompositeView.extend({
      itemView: nodeView,
      template: "#wrapper_ul",
      itemViewContainer: "ul",
      id: "node",
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#placeholder").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:nodeRefresh", function(mac, idn) {
      var _this = this;

      $("body").addClass('ui-disabled');
      $.mobile.showPageLoadingMsg("a", "Loading", false);
      return window.forge.ajax({
        url: Meshable.rooturl + "/api/gateway",
        data: {
          macaddress: mac,
          nodeid: idn
        },
        dataType: "json",
        type: "GET",
        error: function(e) {
          return alert("An error occurred while getting node details... sorry!");
        },
        success: function(data) {
          if (data.isAuthenticated === false) {
            return alert("auth:logout");
          } else if (data.length === 0) {
            $("body").removeClass('ui-disabled');
            $.mobile.hidePageLoadingMsg();
            alert("No nodes at this location");
            return Backbone.history.navigate("gateways", {
              trigger: false,
              replace: true
            });
          } else {
            return displayResults(data);
          }
        }
      });
    });
    Meshable.vent.on("goto:node", function(model) {
      return displayResults(model);
    });
    return displayResults = function(data) {
      var nodeCoView, nodeCollection, tempNode;

      nodeCollection = new nodes;
      tempNode = new node;
      nodeCollection.add(tempNode.parse(data));
      nodeCoView = new nodeCompView({
        collection: nodeCollection
      });
      Meshable.currentpage = "node";
      nodeCoView.render();
      $('#mainDiv').empty();
      $('#mainDiv').append($(nodeCoView.el));
      $("#mainDiv").trigger('create');
      $.mobile.hidePageLoadingMsg();
      $("body").removeClass('ui-disabled');
      $("#mainPage a").removeClass('ui-btn-active');
      return $("#nodesbtnn").addClass('ui-btn-active');
    };
  });

}).call(this);
