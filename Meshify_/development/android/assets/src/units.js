// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var displayResults, nodeCompView, nodeView, nodea, nodes, showResults;

    nodea = Backbone.Model.extend({
      initialize: function() {
        return this.set({
          trafficlight: "green"
        });
      },
      defaults: {
        trafficlight: "green"
      }
    });
    nodes = Backbone.Collection.extend({
      model: nodea
    });
    nodeView = Backbone.Marionette.ItemView.extend({
      initialize: function(node) {
        return this.bindTo(this.model, "change", this.render);
      },
      template: '#nodeitem-template',
      tagName: 'li',
      className: "list_item_node",
      onRender: function() {
        $("#mainDiv").trigger('create');
        return $("#mainPage").trigger('create');
      },
      events: {
        "click .ui-link-inherit": "displayNode"
      },
      displayNode: function() {
        $("body").addClass('ui-disabled');
        return $.mobile.showPageLoadingMsg("a", "Loading", false);
      }
    });
    nodeCompView = Backbone.Marionette.CompositeView.extend({
      itemView: nodeView,
      template: "#wrapper_ul",
      itemViewContainer: "ul",
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#placeholder").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:units", function(refresh) {
      var _this = this;

      if (!refresh && Meshable.current_units !== "") {
        showResults(Meshable.current_units);
        return;
      }
      $("body").addClass('ui-disabled');
      $.mobile.showPageLoadingMsg("a", "Loading", false);
      return window.forge.ajax({
        url: "http://devbuildinglynx.apphb.com/api/Locations",
        data: {
          term: "",
          systemTypes: "",
          problemStatuses: "",
          customGroups: "",
          pageIndex: 0,
          pageSize: 30
        },
        dataType: "json",
        type: "GET",
        error: function(e) {
          return alert("An error occurred on search... sorry!");
        },
        success: function(data) {
          var list, node, _i, _len;

          list = [];
          data = data.CurrentPageListItems;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            node = data[_i];
            list.push(node.gateway.macaddress);
          }
          if (data.isAuthenticated === false) {
            return Backbone.history.navigate("logout", {
              replace: false,
              trigger: true
            });
          } else if (data.length === 0) {
            return alert("No Results");
          } else {
            return displayResults(list);
          }
        }
      });
    });
    displayResults = function(list) {
      var count, listlen, macaddress, nodeCollection, _i, _len, _results;

      nodeCollection = new nodes;
      listlen = list.length;
      count = 0;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        macaddress = list[_i];
        _results.push((function(macaddress) {
          var _this = this;

          $.mobile.showPageLoadingMsg("a", "Loading", false);
          return window.forge.ajax({
            url: "http://devbuildinglynx.apphb.com/api/gateway",
            data: {
              macaddress: macaddress
            },
            dataType: "json",
            type: "GET",
            error: function(e) {
              return alert("An error occurred while getting node details... sorry!");
            },
            success: function(data) {
              var obj, tempNode, _j, _len1;

              if (data.isAuthenticated === false) {
                return Backbone.history.navigate("logout", {
                  replace: false,
                  trigger: true
                });
              } else {
                for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
                  obj = data[_j];
                  if (obj.nodetemplate !== "mainMistaway") {
                    tempNode = new nodea;
                    nodeCollection.add(tempNode.parse(obj));
                  }
                }
                count += 1;
                if (count >= listlen) {
                  Meshable.current_units = nodeCollection;
                  return showResults(nodeCollection);
                }
              }
            }
          });
        })(macaddress));
      }
      return _results;
    };
    return showResults = function(nodeCollection) {
      var nodeCoView;

      nodeCoView = new nodeCompView({
        collection: nodeCollection
      });
      Meshable.currentpage = "units";
      nodeCoView.render();
      $('#mainDiv').empty();
      $('#mainDiv').append($(nodeCoView.el));
      $("#mainDiv").trigger('create');
      $.mobile.hidePageLoadingMsg();
      $("body").removeClass('ui-disabled');
      $("body").removeClass('ui-disabled');
      $("#mainPage a").removeClass('ui-btn-active');
      return $("#nodesbtnn").addClass('ui-btn-active');
    };
  });

}).call(this);
