!SESSION 2013-12-09 09:43:07.892 -----------------------------------------------
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.dsl.product -keyring /Users/lewiswight/.eclipse_keyring -showlocation

This is a continuation of log file /Users/lewiswight/forge-workspace/.metadata/.bak_0.log
Created Time: 2013-12-13 12:31:13.891

!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:13.892
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		u
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7572, length: 0, timestamp: 46
text:>u<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:14.115
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		un
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7573, length: 0, timestamp: 47
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:14.339
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		und
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7574, length: 0, timestamp: 48
text:>d<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:14.579
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		unde
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7575, length: 0, timestamp: 49
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:14.795
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undef
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7576, length: 0, timestamp: 50
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:15.003
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefi
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7577, length: 0, timestamp: 51
text:>i<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:15.099
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefin
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7578, length: 0, timestamp: 52
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:15.235
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefine
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7579, length: 0, timestamp: 53
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:15.403
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7580, length: 0, timestamp: 54
text:>d<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:15.563
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined 
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7581, length: 0, timestamp: 55
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:16.345
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined U
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7582, length: 0, timestamp: 56
text:>U<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:16.603
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Un
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7583, length: 0, timestamp: 57
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:16.679
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Und
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7584, length: 0, timestamp: 58
text:>d<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:16.836
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Unde
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7585, length: 0, timestamp: 59
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:16.980
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undef
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7586, length: 0, timestamp: 60
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:17.214
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefi
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7587, length: 0, timestamp: 61
text:>i<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:17.380
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefin
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7588, length: 0, timestamp: 62
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:17.580
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefine
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7589, length: 0, timestamp: 63
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:17.764
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefined
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7590, length: 0, timestamp: 64
text:>d<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:17.904
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefined 
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7591, length: 0, timestamp: 65
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:18.281
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefined
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7591, length: 1, timestamp: 66
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:18.787
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefine
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7590, length: 1, timestamp: 67
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:18.848
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefin
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7589, length: 1, timestamp: 68
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:18.902
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undefi
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7588, length: 1, timestamp: 69
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:18.992
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Undef
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7587, length: 1, timestamp: 70
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.079
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Unde
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7586, length: 1, timestamp: 71
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.180
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Und
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7585, length: 1, timestamp: 72
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.246
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined Un
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7584, length: 1, timestamp: 73
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.385
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined U
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7583, length: 1, timestamp: 74
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.437
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined 
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7582, length: 1, timestamp: 75
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.514
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefined
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7581, length: 1, timestamp: 76
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.596
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefine
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7580, length: 1, timestamp: 77
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.680
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefin
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7579, length: 1, timestamp: 78
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.746
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undefi
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7578, length: 1, timestamp: 79
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.852
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		undef
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7577, length: 1, timestamp: 80
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.930
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		unde
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7576, length: 1, timestamp: 81
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:19.986
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		und
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7575, length: 1, timestamp: 82
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:20.080
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		un
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7574, length: 1, timestamp: 83
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:20.303
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		u
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7573, length: 1, timestamp: 84
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:20.680
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 #and Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7572, length: 1, timestamp: 85
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:36.501
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7800, length: 0, timestamp: 87
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:36.747
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and n Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7801, length: 0, timestamp: 88
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:36.843
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and no Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7802, length: 0, timestamp: 89
text:>o<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:37.082
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and not Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7803, length: 0, timestamp: 90
text:>t<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:45.066
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and no Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7803, length: 1, timestamp: 91
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:45.274
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and n Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7802, length: 1, timestamp: 92
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:45.450
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		alert Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7801, length: 1, timestamp: 93
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:51.778
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		aMeshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7698, length: 5, timestamp: 94
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:52.018
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7697, length: 1, timestamp: 95
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:52.978
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		iMeshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7697, length: 0, timestamp: 96
text:>i<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:53.082
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		ifMeshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7698, length: 0, timestamp: 97
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:31:53.490
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7699, length: 0, timestamp: 98
text:> <



!ENTRY org.apache.log4j 4 0 2013-12-13 12:32:43.810
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined"" 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7866, length: 0, timestamp: 99
text:>""<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:32:46.366
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not undefined'' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7866, length: 0, timestamp: 102
text:>''<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:32:49.818
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7857, length: 0, timestamp: 104
text:>'<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:01.745
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  tMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7799, length: 0, timestamp: 105
text:>t<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:01.978
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  tyMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7800, length: 0, timestamp: 106
text:>y<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:02.201
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7801, length: 0, timestamp: 107
text:>p<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:02.976
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7802, length: 0, timestamp: 108
text:>e<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:03.159
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeoMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7803, length: 0, timestamp: 109
text:>o<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:03.243
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeofMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7804, length: 0, timestamp: 110
text:>f<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:04.061
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeof(Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7805, length: 0, timestamp: 111
text:>(<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:39.840
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeofMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7805, length: 1, timestamp: 112
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:40.001
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeoMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7804, length: 1, timestamp: 113
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:40.120
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typeMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7803, length: 1, timestamp: 114
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:40.272
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  typMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7802, length: 1, timestamp: 115
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:40.536
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  tyMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7801, length: 1, timestamp: 116
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:40.712
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  tMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7800, length: 1, timestamp: 117
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:40.872
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and  Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7799, length: 1, timestamp: 118
text:><



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:41.322
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and Meshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7798, length: 1, timestamp: 119
text:><



!ENTRY org.eclipse.core.jobs 4 2 2013-12-13 12:33:41.878
!MESSAGE An internal error occurred during: "XtextReconcilerJob".
!STACK 0
java.lang.StringIndexOutOfBoundsException: start > length()
	at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:791)
	at java.lang.StringBuilder.replace(StringBuilder.java:266)
	at org.eclipse.xtext.ui.editor.reconciler.ReconcilerReplaceRegion$Builder.add(ReconcilerReplaceRegion.java:89)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.getMergedReplaceRegion(XtextReconciler.java:325)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.doRun(XtextReconciler.java:354)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.access$2(XtextReconciler.java:350)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:294)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler$1.process(XtextReconciler.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:81)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:219)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:103)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:291)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:45.073
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and uMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7798, length: 0, timestamp: 120
text:>u<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:45.336
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and unMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7799, length: 0, timestamp: 121
text:>n<



!ENTRY org.apache.log4j 4 0 2013-12-13 12:33:45.744
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>define ['jquery', 'jqm', 'backbone','underscore','marionette', 'Meshable', 'Events'], ($, jqm, Backbone, _, Marionette, Meshable, Events) ->									 


	
				
	nodea = Backbone.Model.extend 
		initialize: -> 
				@set
					trafficlight: "green"		
			defaults: 				 				
				trafficlight: "green" 			
				
		
	nodes = Backbone.Collection.extend
		model: nodea	
	


	nodeView = Backbone.Marionette.ItemView.extend
		initialize: (node) ->
			
			@bindTo @model, "change", @render
			if node.model.attributes.nodetemplate == "header"
				@template = "#label-template"
				@.$el.attr('data-role', 'list-divider')
			else if node.model.attributes.nodetemplate == "resultsIndictor"
				@template = '#nodeitem-' + node.model.attributes.nodetemplate
				@.$el.attr('data-role', 'list-divider')
				@.$el.attr('data-theme', 'c')
			else 
				@template = '#nodeitem-' + node.model.attributes.nodetemplate

	
			
			
		
		tagName: 'li'
		className: "list_item_node"
		onRender: ->
			$("#mainDiv").trigger('create')
		
		events:
			"click #add10": "add10Items"
			"click #list_item_node": "pop"
			
			
		
		
		pop: ->
			$("#popupBasic").popup()
		
		add10Items: ->
			if not forge.is.connection.connected()
				forge.notification.alert("Failed to Load", "No Internet Connection")
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			Meshable.current_index += 1
			LoadTenMore Meshable.current_index, Meshable.current_searchTerm
			@model.destroy()
		
		displayNode: ->
			$("body").addClass('ui-disabled')
			$.mobile.showPageLoadingMsg("a", "Loading", false)
			Meshable.router.navigate "/gateway/" + @model.attributes.macaddress + "/" + @model.attributes.node.NodeId, trigger: false
			Meshable.vent.trigger "goto:node", @model.attributes
			
		


	nodeCompView = Backbone.Marionette.CompositeView.extend
		itemView: nodeView
		template: "#wrapper_ul"
		itemViewContainer: "ul"
		#id: "node-test"
		
		
		
			
		
		appendHtml: (collectionView, itemView) ->
			collectionView.$("#placeholder").append(itemView.el)			
				
	
	

	
	
	Meshable.vent.on "goto:units", (refresh, routerObj) ->
		
		forge.topbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		forge.tabbar.show(
		  ->
			console.log "hi"
		, (e) ->
			console.log e
		)
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		Meshable.loading = true
		
		if routerObj != ""
			displayResults routerObj
			return
		
		if not refresh and Meshable.current_units != "" and Meshable.refreshUnits == false
			showResults()
			return
		
		#if not refresh and Meshable.currentDataObj != ""
		#		displayResults Meshable.currentDataObj
		#		return
		
		
		
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		
		Meshable.current_index = 0
		
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			window.history.back()
			return
		
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: Meshable.current_searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: 0, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 15000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
				return
			success: (data) =>
				dataObj = new Object 
				dataObj.list = [] 
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					displayResults dataObj
					
	 

	
	displayResults = (dataObj) ->
		Meshable.refreshUnits = false
		Meshable.current_units = new nodes 
		listlen = dataObj.list.length
		count = 0
		
		if not forge.is.connection.connected()
			forge.notification.alert("Failed to Load", "No Internet Connection")
			$("body").removeClass('ui-disabled')
			$.mobile.hidePageLoadingMsg()
			Meshable.loading = false
			return
			
		Meshable.headers = 0
		
		for obj in dataObj.list
			do (obj) ->
				obj.models = new Array()
				$.mobile.showPageLoadingMsg("a", "Loading", false)
				forge.request.ajax
					url: Meshable.rooturl + "/api/gateway"
					data:  macaddress: obj.gateway.macaddress
					dataType: "json"
					type: "GET"
					timeout: 25000
					error: (e) -> 
						count += 1
						if count >= listlen
							tempNode = new nodea { 
								nodetemplate: "add"
								}
							obj.models.push(tempNode)
							buildViews dataObj.list
							#Meshable.current_units.add tempNode
							#showResults Meshable.current_units
					success: (data) =>
						if data.isAuthenticated == false
							Backbone.history.navigate "logout", replace: false, trigger: true
						else
							tempNode = new nodea {
								zip: obj.address.zip
								state: obj.address.state
								address: obj.address.street1
								city: obj.address.city 
								first: obj.person.first
								nodetemplate: "header"
								last: obj.person.last
								phone1: obj.person.phone1
								mac: obj.gateway.macaddress
								}
							Meshable.headers += 1
							obj.models.push(tempNode)
							#Meshable.current_units.add tempNode
							
							for obja in data
								obja.person = new Object
								obja.person = obj.person
								obja.address = new Object
								obja.address = obj.address
								if obja.nodetemplate != "mainMistaway"
									tempNode = new nodea
									obj.models.push(tempNode.parse(obja))
									#Meshable.current_units.add tempNode.parse(obja)
							count += 1
							if count >= listlen
								
								###if count > 1
									tempNode = new nodea { 
										nodetemplate: "add"
										}
									Meshable.current_units.add tempNode###
								
								buildViews dataObj.list	
								#showResults Meshable.current_units
								
									
				
		
	
		
		
	buildViews = (obj) ->
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		
		if Meshable.headers != 1
			if Meshable.current_searchTerm == "" or Meshable.current_searchTerm == "_"
				resIndicator = "All Units"
			else
				resIndicator = ("Results For: " + Meshable.current_searchTerm)
		
			tempNode = new nodea {
				res: resIndicator 
				nodetemplate: "resultsIndictor"
				}
			Meshable.current_units.add tempNode, {at: 0}	
		
		showResults()			
		
			
	showResults = ->
		
		
		Meshable.nodeCoView = new nodeCompView
			collection: Meshable.current_units
	
		alert Meshable.current_units.size()
		if Meshable.current_units.at(1).attributes.macaddress
		
		if Meshable.current_units.size() == 2 and undMeshable.current_units.at(1).attributes.macaddress is not 'undefined' 
			mac = Meshable.current_units.at(1).attributes.macaddress
			nodeId = Meshable.current_units.at(1).attributes.node.NodeId
			first = Meshable.current_units.at(1).attributes.person.first
			last = Meshable.current_units.at(1).attributes.person.last
			phone = Meshable.current_units.at(1).attributes.person.phone1
			city = Meshable.current_units.at(1).attributes.address.city
			state = Meshable.current_units.at(1).attributes.address.state
			street = Meshable.current_units.at(1).attributes.address.street1
			zip = Meshable.current_units.at(1).attributes.address.zip
			route = "/gateway/" + mac + "/" + nodeId + "/" + first + "/" + last + "/" + phone + "/" + city + "/" + state + "/" + street + "/" + zip
			Meshable.router.navigate route, trigger : true, replace: true
			Meshable.unitsButton.setActive()
			return  
		
		
		
					
		Meshable.currentpage = "units"
		#$('#mainDiv').hide() 
		
		Meshable.nodeCoView.render()
		$('#mainDiv').empty()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		Meshable.unitsButton.setActive()
		if Meshable.backplace != ""
				$('html, body').animate({scrollTop: ($(Meshable.backplace).offset().top - 10)}, 0)
				Meshable.backplace = ""
		#Meshable.changePage nodeCoView, false

	
	LoadTenMore = (index, searchTerm) ->
		
		
		Meshable.loading = true
		$("body").addClass('ui-disabled')
		$.mobile.showPageLoadingMsg("a", "Loading", false)
		
		Meshable.current_searchTerm = searchTerm
		Meshable.current_index = index
		
		forge.request.ajax
			url: Meshable.rooturl + "/api/Locations"
			data: { term: searchTerm, systemTypes: "", problemStatuses: "", customGroups: "", pageIndex: index, pageSize: 10 }
			dataType: "json"
			type: "GET"
			timeout: 10000
			error: (e) -> 
				forge.notification.alert("Error", e.message) 
				$("body").removeClass('ui-disabled')
				$.mobile.hidePageLoadingMsg()
				Meshable.loading = false
			success: (data) =>
				dataObj = new Object 
				dataObj.list = []
				data = data.CurrentPageListItems
				for node in data
					node.person.userRole = Meshable.userRole
					if node.person.first == ""
						node.person.first = "unknown" 
					if node.person.last == ""
						node.person.last = "unknown"
					if node.person.phone1 == ""
						node.person.phone1 = "000-000-0000"
					if node.address.city == ""
						node.address.city = "unknown"
					if node.address.state == ""
						node.address.state = "unknown"
					if node.address.street1 == ""
						node.address.street1 = "unknown"
					if node.address.zip == ""
						node.address.zip = "unknown"
					TempObj = node
					dataObj.list.push(TempObj)
				Meshable.currentDataObj = dataObj
				Meshable.refreshUnits = false
				if data.isAuthenticated == false
					Backbone.history.navigate "logout", replace: false, trigger: true
				else if data.length == 0
					forge.notification.alert("No More Results", "") 
					$.mobile.hidePageLoadingMsg()
					$("body").removeClass('ui-disabled')
					Meshable.loading = false
				else
					Meshable.refreshUnits = false
					listlen = dataObj.list.length
					count = 0
					modelList =[]
					for obj in dataObj.list
						
						do (obj) ->
							obj.models = new Array()
							$.mobile.showPageLoadingMsg("a", "Loading", false)
							forge.request.ajax
								url: Meshable.rooturl + "/api/gateway"
								data:  macaddress: obj.gateway.macaddress
								dataType: "json"
								type: "GET"
								timeout: 25000
								error: (e) -> 
									count += 1
									if count >= listlen
										tempNode = new nodea { 
											nodetemplate: "add"
											}
										obj.models.push(tempNode)
										build10Views dataObj.list
										###for model in obj.models
											Meshable.current_units.add model
										showResults10 Meshable.current_units, true###
								success: (data) =>
									if data.isAuthenticated == false
										Backbone.history.navigate "logout", replace: false, trigger: true
									else
										tempNode = new nodea {
											zip: obj.address.zip
											state: obj.address.state
											address: obj.address.street1
											city: obj.address.city 
											first: obj.person.first
											nodetemplate: "header"
											last: obj.person.last
											phone1: obj.person.phone1
											mac: obj.gateway.macaddress
											}
										obj.models.push(tempNode)
										#Meshable.current_units.add tempNode
										
										for obja in data
											obja.person = new Object
											obja.person = obj.person
											obja.address = new Object
											obja.address = obj.address
											if obja.nodetemplate != "mainMistaway"
												tempNode = new nodea
												tempNode1 = tempNode.parse(obja)
												obj.models.push(tempNode1)
												
												
										count += 1
										if count >= listlen
				
											build10Views dataObj.list
											###for model in obj.models
												Meshable.current_units.add model
											showResults10 Meshable.current_units, true###
											
	
	build10Views = (obj) ->
		
		for unit in obj
			for model in unit.models
				Meshable.current_units.add model
				
		if Meshable.current_units.size() >= 20
			tempNode = new nodea { 
				nodetemplate: "add"
				}
			Meshable.current_units.add tempNode
		showResults10 Meshable.current_units, true	
							
	showResults10 = (temp, go) ->
		hi = temp			
		Meshable.currentpage = "units"
		$('#mainDiv').empty()
		Meshable.nodeCoView.render()
		$('#mainDiv').append($(Meshable.nodeCoView.el))
		$("#mainDiv").trigger('create')
		#Meshable.unitsButton.setActive()
		$.mobile.hidePageLoadingMsg()
		$("body").removeClass('ui-disabled')
		Meshable.loading = false
		
		
		



	
<<<
Document event: offset: 7800, length: 0, timestamp: 122
text:>d<


